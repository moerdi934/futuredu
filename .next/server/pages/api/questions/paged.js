"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/questions/paged";
exports.ids = ["pages/api/questions/paged"];
exports.modules = {

/***/ "(api-node)/./controllers/questions.controller.ts":
/*!*********************************************!*\
  !*** ./controllers/questions.controller.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendExamId: () => (/* binding */ appendExamId),\n/* harmony export */   createBulkQuestions: () => (/* binding */ createBulkQuestions),\n/* harmony export */   createPassage: () => (/* binding */ createPassage),\n/* harmony export */   createQuestion: () => (/* binding */ createQuestion),\n/* harmony export */   deleteQuestion: () => (/* binding */ deleteQuestion),\n/* harmony export */   getAllQuestions: () => (/* binding */ getAllQuestions),\n/* harmony export */   getDiagnosticQuestionsByExamString: () => (/* binding */ getDiagnosticQuestionsByExamString),\n/* harmony export */   getPagedQuestions: () => (/* binding */ getPagedQuestions),\n/* harmony export */   getPassageById: () => (/* binding */ getPassageById),\n/* harmony export */   getQuestionById: () => (/* binding */ getQuestionById),\n/* harmony export */   getQuestionByUId: () => (/* binding */ getQuestionByUId),\n/* harmony export */   getQuestionsByExamId: () => (/* binding */ getQuestionsByExamId),\n/* harmony export */   getQuestionsByExamString: () => (/* binding */ getQuestionsByExamString),\n/* harmony export */   handleSingleQuestion: () => (/* binding */ handleSingleQuestion),\n/* harmony export */   searchPassages: () => (/* binding */ searchPassages),\n/* harmony export */   searchQuestions: () => (/* binding */ searchQuestions),\n/* harmony export */   updateBulkQuestions: () => (/* binding */ updateBulkQuestions),\n/* harmony export */   updatePassage: () => (/* binding */ updatePassage),\n/* harmony export */   updateQuestion: () => (/* binding */ updateQuestion),\n/* harmony export */   verifyCsv: () => (/* binding */ verifyCsv)\n/* harmony export */ });\n/* harmony import */ var _models_questions_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/questions.model */ \"(api-node)/./models/questions.model.ts\");\n/* harmony import */ var _models_examTypes_model__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../models/examTypes.model */ \"(api-node)/./models/examTypes.model.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/db */ \"(api-node)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_models_questions_model__WEBPACK_IMPORTED_MODULE_0__, _models_examTypes_model__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_3__]);\n([_models_questions_model__WEBPACK_IMPORTED_MODULE_0__, _models_examTypes_model__WEBPACK_IMPORTED_MODULE_1__, _lib_db__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// controllers/questions.controller.ts\n\n\n\n\n// Mock queue implementation\nlet questionQueue = null;\n// Initialize queue\nconst initializeQueue = async ()=>{\n    if (!questionQueue) {\n        try {\n            const PQueue = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! p-queue */ \"p-queue\"))).default;\n            questionQueue = new PQueue({\n                concurrency: 1\n            });\n        } catch (error) {\n            console.error('Failed to initialize queue:', error);\n        }\n    }\n};\n// Helper Functions\nconst encryptData = (data)=>{\n    const algorithm = 'aes-256-cbc';\n    const key = Buffer.from(process.env.EXAM_ENCRYPTION_KEY || '', 'utf-8');\n    const iv = crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(16);\n    const cipher = crypto__WEBPACK_IMPORTED_MODULE_2__.createCipheriv(algorithm, key.slice(0, 32), iv);\n    let encrypted = cipher.update(JSON.stringify(data), 'utf-8', 'base64');\n    encrypted += cipher.final('base64');\n    return iv.toString('hex') + ':' + encrypted;\n};\n// Controller Functions\nconst searchQuestions = async (req, res)=>{\n    const { search } = req.query;\n    try {\n        const results = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.searchQuestionsByCodeOrId(search);\n        return res.status(200).json({\n            message: 'Questions retrieved successfully',\n            data: results\n        });\n    } catch (error) {\n        return res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst getAllQuestions = async (req, res)=>{\n    try {\n        const questions = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getAllQuestions();\n        res.status(200).json(questions);\n    } catch (error) {\n        console.error('Error fetching questions:', error);\n        res.status(500).json({\n            error: 'Failed to fetch questions'\n        });\n    }\n};\nconst getPagedQuestions = async (req, res)=>{\n    try {\n        const filters = {\n            page: parseInt(req.query.page) || 1,\n            limit: parseInt(req.query.limit) || 50,\n            search: req.query.search || '',\n            question_type: req.query.question_type || 'All',\n            exam_id: req.query.exam_id ? parseInt(req.query.exam_id) : undefined,\n            topic: req.query.topic || undefined,\n            subtopic: req.query.subtopic || undefined,\n            creator: req.query.creator || undefined,\n            start_date: req.query.start_date || undefined,\n            end_date: req.query.end_date || undefined,\n            sortKey: req.query.sortKey || 'q.id',\n            sortOrder: req.query.sortOrder || 'asc',\n            userId: req.query.userId || undefined\n        };\n        const result = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getPagedQuestions(filters);\n        res.status(200).json(result);\n    } catch (error) {\n        console.error('Error in getQuestions controller:', error);\n        res.status(500).json({\n            message: 'Internal Server Error'\n        });\n    }\n};\nconst getQuestionsByExamString = async (req, res)=>{\n    const examString = req.query.exam_string;\n    try {\n        const questions = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getQuestionsByExamString(examString);\n        const encryptedQuestions = encryptData(questions);\n        res.status(200).json({\n            encryptedData: encryptedQuestions\n        });\n    } catch (error) {\n        console.error('Error fetching questions by exam_string:', error);\n        res.status(500).json({\n            error: 'Failed to fetch questions'\n        });\n    }\n};\nconst getDiagnosticQuestionsByExamString = async (req, res)=>{\n    const examString = req.query.exam_string;\n    try {\n        const payload = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getDiagnosticQuestionsByExamString(examString);\n        console.log(payload);\n        res.status(200).json({\n            encryptedData: encryptData(payload)\n        });\n    } catch (err) {\n        console.error('Error fetching diagnostic questions:', err);\n        res.status(500).json({\n            error: 'Failed to fetch diagnostic questions'\n        });\n    }\n};\nconst getQuestionsByExamId = async (req, res)=>{\n    const examId = parseInt(req.query.examid);\n    try {\n        const questions = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getQuestionsByExamId(examId);\n        res.status(200).json(questions);\n    } catch (error) {\n        console.error('Error fetching questions by exam_string:', error);\n        res.status(500).json({\n            error: 'Failed to fetch questions'\n        });\n    }\n};\nconst getQuestionById = async (req, res)=>{\n    const id = parseInt(req.query.id);\n    try {\n        const question = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getQuestionById(id);\n        if (!question) {\n            return res.status(404).json({\n                error: 'Question not found'\n            });\n        }\n        res.status(200).json(question);\n    } catch (error) {\n        console.error('Error fetching question:', error);\n        res.status(500).json({\n            error: 'Failed to fetch question'\n        });\n    }\n};\nconst getQuestionByUId = async (req, res)=>{\n    const id = parseInt(req.query.id);\n    try {\n        const question = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getQuestionByUId(id);\n        if (!question) {\n            return res.status(404).json({\n                error: 'Question not found'\n            });\n        }\n        res.status(200).json(question);\n    } catch (error) {\n        console.error('Error fetching question:', error);\n        res.status(500).json({\n            error: 'Failed to fetch question'\n        });\n    }\n};\nconst createQuestion = async (req, res)=>{\n    await initializeQueue();\n    if (!questionQueue) {\n        return res.status(503).json({\n            error: 'Queue not initialized yet. Please try again shortly.'\n        });\n    }\n    const questionData = req.body;\n    const create_user_id = req.user?.id;\n    if (!create_user_id) {\n        return res.status(400).json({\n            error: 'create_user_id is required'\n        });\n    }\n    try {\n        const result = await questionQueue.add(()=>handleSingleQuestion({\n                questionData,\n                create_user_id\n            }));\n        res.status(201).json(result);\n    } catch (error) {\n        console.error('Error in question queue:', error);\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst handleSingleQuestion = async ({ questionData, create_user_id })=>{\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_3__[\"default\"].connect();\n    const startTime = Date.now();\n    console.log('[handleSingleQuestion] START', {\n        questionData,\n        create_user_id\n    });\n    try {\n        // --- Begin transaction --------------------------------------------------\n        await client.query('BEGIN');\n        console.log('[handleSingleQuestion] BEGIN transaction');\n        // --- Resolve sub‑topic metadata ----------------------------------------\n        const subtopicId = questionData.exam_type_id;\n        console.log('[handleSingleQuestion] subtopicId:', subtopicId);\n        const subtopicsInfo = await _models_examTypes_model__WEBPACK_IMPORTED_MODULE_1__.getSubtopicsInfo([\n            subtopicId\n        ]);\n        console.log('[handleSingleQuestion] subtopicsInfo:', subtopicsInfo);\n        if (!subtopicsInfo.length) {\n            console.error('[handleSingleQuestion] Subtopic not found', {\n                subtopicId\n            });\n            throw new Error(`Subtopik dengan ID ${subtopicId} tidak ditemukan`);\n        }\n        const { bid_code, top_code, sub_code, last_sequence } = subtopicsInfo[0];\n        console.log('[handleSingleQuestion] subtopicInfo:', {\n            bid_code,\n            top_code,\n            sub_code,\n            last_sequence\n        });\n        // --- Generate next question code ---------------------------------------\n        const nextSequence = last_sequence ? parseInt(last_sequence) + 1 : 1;\n        const sequence = nextSequence.toString().padStart(4, '0');\n        const question_code = `${bid_code}${top_code}${sub_code}${sequence}`;\n        console.log('[handleSingleQuestion] Generated question_code:', question_code);\n        // --- Prepare payload ----------------------------------------------------\n        const questionWithCode = {\n            ...questionData,\n            code: question_code,\n            passage_id: questionData.passage_id || null\n        };\n        console.log('[handleSingleQuestion] questionWithCode:', questionWithCode);\n        // --- Persist question ---------------------------------------------------\n        const savedQuestion = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.createQuestion(questionWithCode, create_user_id);\n        console.log('[handleSingleQuestion] savedQuestion:', savedQuestion);\n        // --- Commit transaction -------------------------------------------------\n        await client.query('COMMIT');\n        console.log('[handleSingleQuestion] COMMIT transaction (elapsed %dms)', Date.now() - startTime);\n        return savedQuestion;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        console.error('[handleSingleQuestion] ROLLBACK transaction due to error', error);\n        throw error;\n    } finally{\n        client.release();\n        console.log('[handleSingleQuestion] client released (total %dms)', Date.now() - startTime);\n    }\n};\nconst createBulkQuestions = async (req, res)=>{\n    await initializeQueue();\n    if (!questionQueue) {\n        return res.status(503).json({\n            error: 'Queue not initialized yet. Please try again shortly.'\n        });\n    }\n    const { questions } = req.body;\n    const create_user_id = req.user?.id;\n    if (!questions || !Array.isArray(questions) || questions.length === 0) {\n        return res.status(400).json({\n            error: 'No questions provided'\n        });\n    }\n    if (!create_user_id) {\n        return res.status(400).json({\n            error: 'create_user_id is required'\n        });\n    }\n    try {\n        const result = await questionQueue.add(()=>handleBulkQuestions({\n                questions,\n                create_user_id\n            }));\n        res.status(201).json(result);\n    } catch (error) {\n        console.error('Error in bulk queue:', error);\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst handleBulkQuestions = async ({ questions, create_user_id })=>{\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_3__[\"default\"].connect();\n    try {\n        await client.query('BEGIN');\n        const subtopicMap = new Map();\n        questions.forEach((q)=>{\n            const subtopicId = q.exam_type_id;\n            if (!subtopicMap.has(subtopicId)) {\n                subtopicMap.set(subtopicId, []);\n            }\n            subtopicMap.get(subtopicId).push(q);\n        });\n        const subtopicIds = [\n            ...subtopicMap.keys()\n        ];\n        const subtopicsInfo = await _models_examTypes_model__WEBPACK_IMPORTED_MODULE_1__.getSubtopicsInfo(subtopicIds);\n        const questionsWithCodes = [];\n        const codeCounters = new Map();\n        for (const { id, last_sequence } of subtopicsInfo){\n            codeCounters.set(id, last_sequence ? parseInt(last_sequence) + 1 : 1);\n        }\n        for (const [subtopicId, questionGroup] of subtopicMap){\n            const subtopicInfo = subtopicsInfo.find((info)=>info.id === subtopicId);\n            if (!subtopicInfo) {\n                throw new Error(`Subtopik dengan ID ${subtopicId} tidak ditemukan`);\n            }\n            const { bid_code, top_code, sub_code } = subtopicInfo;\n            let counter = codeCounters.get(subtopicId);\n            for (const question of questionGroup){\n                const sequence = counter.toString().padStart(4, '0');\n                const question_code = `${bid_code}${top_code}${sub_code}${sequence}`;\n                questionsWithCodes.push({\n                    ...question,\n                    question_code,\n                    passage_id: question.passage_id || null,\n                    create_user_id\n                });\n                counter++;\n            }\n            codeCounters.set(subtopicId, counter);\n        }\n        const savedQuestions = [];\n        for (const q of questionsWithCodes){\n            const savedQuestion = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.createQuestion(q, create_user_id);\n            savedQuestions.push(savedQuestion);\n        }\n        await client.query('COMMIT');\n        return savedQuestions;\n    } catch (error) {\n        await client.query('ROLLBACK');\n        throw error;\n    } finally{\n        client.release();\n    }\n};\nconst updateQuestion = async (req, res)=>{\n    const questionId = parseInt(req.query.id);\n    const questionData = req.body;\n    const edit_user_id = req.user?.id;\n    if (!edit_user_id) {\n        return res.status(400).json({\n            error: 'edit_user_id is required'\n        });\n    }\n    try {\n        const updatedQuestion = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.updateQuestion(questionId, questionData, edit_user_id);\n        if (!updatedQuestion) {\n            return res.status(404).json({\n                error: 'Question not found'\n            });\n        }\n        res.json(updatedQuestion);\n    } catch (error) {\n        console.error('Error updating question:', error);\n        res.status(500).json({\n            error: 'Failed to update question'\n        });\n    }\n};\nconst updateBulkQuestions = async (req, res)=>{\n    const { questions } = req.body;\n    const edit_user_id = req.user?.id;\n    if (!Array.isArray(questions) || questions.length === 0) {\n        return res.status(400).json({\n            error: 'Questions array is required and must not be empty'\n        });\n    }\n    if (!edit_user_id) {\n        return res.status(400).json({\n            error: 'edit_user_id is required'\n        });\n    }\n    const missingIds = questions.some((q)=>!q.id);\n    if (missingIds) {\n        return res.status(400).json({\n            error: 'All questions must have an ID for bulk update'\n        });\n    }\n    try {\n        const updatedQuestions = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.updateBulkQuestions(questions, edit_user_id);\n        res.status(200).json(updatedQuestions);\n    } catch (error) {\n        console.error('Error updating bulk questions:', error);\n        res.status(500).json({\n            error: 'Failed to update questions in bulk'\n        });\n    }\n};\nconst appendExamId = async (req, res)=>{\n    const { questionId, examId } = req.body;\n    try {\n        if (!questionId || !examId) {\n            return res.status(400).json({\n                error: 'questionId and examId are required'\n            });\n        }\n        const result = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.appendExamIdToQuestion(questionId, examId);\n        return res.status(200).json({\n            message: 'Exam ID appended successfully',\n            data: result\n        });\n    } catch (error) {\n        return res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst deleteQuestion = async (req, res)=>{\n    const questionId = parseInt(req.query.id);\n    try {\n        const deletedQuestion = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.deleteQuestion(questionId);\n        if (!deletedQuestion) {\n            return res.status(404).json({\n                error: 'Question not found'\n            });\n        }\n        res.json({\n            message: 'Question deleted successfully',\n            question: deletedQuestion\n        });\n    } catch (error) {\n        console.error('Error deleting question:', error);\n        res.status(500).json({\n            error: 'Failed to delete question'\n        });\n    }\n};\n// Passage Controllers\nconst searchPassages = async (req, res)=>{\n    const { search } = req.query;\n    try {\n        const results = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.searchPassages(search);\n        res.status(200).json(results);\n    } catch (error) {\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst getPassageById = async (req, res)=>{\n    const id = parseInt(req.query.id);\n    try {\n        const passage = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.getPassageById(id);\n        if (!passage) {\n            return res.status(404).json({\n                error: 'Passage not found'\n            });\n        }\n        res.status(200).json(passage);\n    } catch (error) {\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst createPassage = async (req, res)=>{\n    const { title, passage } = req.body;\n    const create_user_id = req.user?.id;\n    if (!title || !passage) {\n        return res.status(400).json({\n            error: 'Title and passage are required'\n        });\n    }\n    if (!create_user_id) {\n        return res.status(400).json({\n            error: 'create_user_id is required'\n        });\n    }\n    try {\n        const newPassage = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.createPassage({\n            title,\n            passage\n        }, create_user_id);\n        res.status(201).json(newPassage);\n    } catch (error) {\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst updatePassage = async (req, res)=>{\n    const passageId = parseInt(req.query.id);\n    const { title, passage } = req.body;\n    const update_user_id = req.user?.id;\n    if (!title || !passage) {\n        return res.status(400).json({\n            error: 'Title and passage are required'\n        });\n    }\n    if (!update_user_id) {\n        return res.status(400).json({\n            error: 'update_user_id is required'\n        });\n    }\n    try {\n        const updatedPassage = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.updatePassage(passageId, {\n            title,\n            passage\n        }, update_user_id);\n        if (!updatedPassage) {\n            return res.status(404).json({\n                error: 'Passage not found'\n            });\n        }\n        res.status(200).json(updatedPassage);\n    } catch (error) {\n        res.status(500).json({\n            error: error.message\n        });\n    }\n};\nconst verifyCsv = async (req, res)=>{\n    try {\n        const payload = req.body;\n        if (!Array.isArray(payload) || payload.length === 0) {\n            return res.status(400).json({\n                error: 'Payload harus berupa array dan tidak boleh kosong',\n                example: [\n                    {\n                        \"id\": \"194\",\n                        \"code\": \"LOGFRPR0152\"\n                    },\n                    {\n                        \"id\": \"195\",\n                        \"code\": \"LOGFRPR0153\"\n                    }\n                ]\n            });\n        }\n        const invalidItems = payload.filter((item)=>!item.id || !item.code || typeof item.id !== 'string' || typeof item.code !== 'string');\n        if (invalidItems.length > 0) {\n            return res.status(400).json({\n                error: 'Setiap item harus memiliki property id dan code yang valid',\n                invalidItems: invalidItems,\n                example: {\n                    \"id\": \"194\",\n                    \"code\": \"LOGFRPR0152\"\n                }\n            });\n        }\n        const verificationResult = await _models_questions_model__WEBPACK_IMPORTED_MODULE_0__.verifyIdCodePairs(payload);\n        const matchedPairs = verificationResult.results.filter((r)=>r.is_match);\n        const notFoundIds = verificationResult.results.filter((r)=>r.status === 'id_not_found');\n        const mismatchedCodes = verificationResult.results.filter((r)=>r.status === 'code_mismatch');\n        const response = {\n            status: 'success',\n            message: 'Verifikasi pasangan ID-Code berhasil dilakukan',\n            summary: verificationResult.summary,\n            data: {\n                matched_pairs: matchedPairs,\n                id_not_found: notFoundIds,\n                code_mismatched: mismatchedCodes\n            }\n        };\n        if (verificationResult.summary.matched === verificationResult.summary.total) {\n            res.status(200).json(response);\n        } else if (verificationResult.summary.matched === 0) {\n            res.status(404).json({\n                ...response,\n                status: 'no_match',\n                message: 'Tidak ada pasangan ID-Code yang cocok'\n            });\n        } else {\n            res.status(206).json({\n                ...response,\n                status: 'partial_match',\n                message: 'Sebagian pasangan ID-Code cocok, sebagian tidak cocok'\n            });\n        }\n    } catch (error) {\n        console.error('Error verifying CSV:', error);\n        res.status(500).json({\n            error: 'Gagal melakukan verifikasi CSV',\n            details:  true ? error.message : 0\n        });\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./controllers/questions.controller.ts\n");

/***/ }),

/***/ "(api-node)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// lib/db.ts\n\n\n// Read CA certificate\nconst ca = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync('./ca.pem').toString();\nconst config = {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT),\n    ssl: {\n        ca: ca,\n        rejectUnauthorized: false\n    }\n};\nconst pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n// Test the database connection\npool.connect((err, client, release)=>{\n    if (err) {\n        console.error('Error acquiring client', err.stack);\n    } else {\n        console.log('Connected to the database');\n    }\n    release();\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pool);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsWUFBWTtBQUMwQjtBQUNiO0FBZXpCLHNCQUFzQjtBQUN0QixNQUFNRSxLQUFLRCw0Q0FBZSxDQUFDLFlBQVlHLFFBQVE7QUFFL0MsTUFBTUMsU0FBeUI7SUFDN0JDLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTztJQUN6QkMsTUFBTUgsUUFBUUMsR0FBRyxDQUFDRyxPQUFPO0lBQ3pCQyxVQUFVTCxRQUFRQyxHQUFHLENBQUNLLFdBQVc7SUFDakNDLFVBQVVQLFFBQVFDLEdBQUcsQ0FBQ08sV0FBVztJQUNqQ0MsTUFBTUMsU0FBU1YsUUFBUUMsR0FBRyxDQUFDVSxPQUFPO0lBQ2xDQyxLQUFLO1FBQ0hqQixJQUFJQTtRQUNKa0Isb0JBQW9CO0lBQ3RCO0FBQ0Y7QUFFQSxNQUFNQyxPQUFPLElBQUlyQixvQ0FBSUEsQ0FBQ0s7QUFFdEIsK0JBQStCO0FBQy9CZ0IsS0FBS0MsT0FBTyxDQUFDLENBQUNDLEtBQXdCQyxRQUFnQ0M7SUFDcEUsSUFBSUYsS0FBSztRQUNQRyxRQUFRQyxLQUFLLENBQUMsMEJBQTBCSixJQUFJSyxLQUFLO0lBQ25ELE9BQU87UUFDTEYsUUFBUUcsR0FBRyxDQUFDO0lBQ2Q7SUFDQUo7QUFDRjtBQUVBLGlFQUFlSixJQUFJQSxFQUFDIiwic291cmNlcyI6WyJEOlxcTGF0aWhhblxcTmV3IGZvbGRlciAoMilcXEZFXFwxXFxGRVxcTmV4dFxcZnV0dXJlZHVcXGxpYlxcZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2RiLnRzXHJcbmltcG9ydCB7IFBvb2wsIFBvb2xDbGllbnQgfSBmcm9tICdwZyc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuXHJcbi8vIFR5cGVzXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YWJhc2VDb25maWcge1xyXG4gIGhvc3Q6IHN0cmluZztcclxuICB1c2VyOiBzdHJpbmc7XHJcbiAgcGFzc3dvcmQ6IHN0cmluZztcclxuICBkYXRhYmFzZTogc3RyaW5nO1xyXG4gIHBvcnQ6IG51bWJlcjtcclxuICBzc2w6IHtcclxuICAgIGNhOiBzdHJpbmc7XHJcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuLy8gUmVhZCBDQSBjZXJ0aWZpY2F0ZVxyXG5jb25zdCBjYSA9IGZzLnJlYWRGaWxlU3luYygnLi9jYS5wZW0nKS50b1N0cmluZygpO1xyXG5cclxuY29uc3QgY29uZmlnOiBEYXRhYmFzZUNvbmZpZyA9IHtcclxuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUISxcclxuICB1c2VyOiBwcm9jZXNzLmVudi5EQl9VU0VSISxcclxuICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQhLFxyXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9EQVRBQkFTRSEsXHJcbiAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCEpLFxyXG4gIHNzbDoge1xyXG4gICAgY2E6IGNhLFxyXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbChjb25maWcpO1xyXG5cclxuLy8gVGVzdCB0aGUgZGF0YWJhc2UgY29ubmVjdGlvblxyXG5wb29sLmNvbm5lY3QoKGVycjogRXJyb3IgfCB1bmRlZmluZWQsIGNsaWVudDogUG9vbENsaWVudCB8IHVuZGVmaW5lZCwgcmVsZWFzZTogKCkgPT4gdm9pZCkgPT4ge1xyXG4gIGlmIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFjcXVpcmluZyBjbGllbnQnLCBlcnIuc3RhY2spO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIHRoZSBkYXRhYmFzZScpO1xyXG4gIH1cclxuICByZWxlYXNlKCk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcG9vbDsiXSwibmFtZXMiOlsiUG9vbCIsImZzIiwiY2EiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsImNvbmZpZyIsImhvc3QiLCJwcm9jZXNzIiwiZW52IiwiREJfSE9TVCIsInVzZXIiLCJEQl9VU0VSIiwicGFzc3dvcmQiLCJEQl9QQVNTV09SRCIsImRhdGFiYXNlIiwiREJfREFUQUJBU0UiLCJwb3J0IiwicGFyc2VJbnQiLCJEQl9QT1JUIiwic3NsIiwicmVqZWN0VW5hdXRob3JpemVkIiwicG9vbCIsImNvbm5lY3QiLCJlcnIiLCJjbGllbnQiLCJyZWxlYXNlIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJsb2ciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.ts\n");

/***/ }),

/***/ "(api-node)/./lib/middleware/auth.ts":
/*!********************************!*\
  !*** ./lib/middleware/auth.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authenticateJWT: () => (/* binding */ authenticateJWT),\n/* harmony export */   authenticateRole: () => (/* binding */ authenticateRole),\n/* harmony export */   optionalAuthenticateJWT: () => (/* binding */ optionalAuthenticateJWT),\n/* harmony export */   runMiddleware: () => (/* binding */ runMiddleware)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n// lib/middleware/auth.ts\n\nconst secretKey = process.env.JWT_SECRET_KEY;\n// JWT Authentication Middleware\nconst authenticateJWT = (req, res, next)=>{\n    let token = req.cookies.authToken || req.headers['authorization'];\n    if (token) {\n        if (token.startsWith('Bearer ')) {\n            token = token.slice(7, token.length);\n        }\n        jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, secretKey, (err, user)=>{\n            console.log('Verifying token...');\n            if (err) {\n                console.error('JWT Verification Error:', err);\n                return res.status(403).json({\n                    message: 'Forbidden'\n                });\n            }\n            req.user = user;\n            next();\n        });\n    } else {\n        res.status(401).json({\n            message: 'Unauthorized'\n        });\n    }\n};\n// Optional JWT Authentication Middleware\nconst optionalAuthenticateJWT = (req, res, next)=>{\n    let token = req.cookies.authToken || req.headers['authorization'];\n    if (token) {\n        if (token.startsWith('Bearer ')) {\n            token = token.slice(7);\n        }\n        jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, secretKey, (err, user)=>{\n            if (!err) {\n                req.user = user;\n            }\n            next();\n        });\n    } else {\n        next();\n    }\n};\n// Role-based Authentication Middleware\nconst authenticateRole = (roles)=>{\n    return (req, res, next)=>{\n        if (req.user && roles.includes(req.user.role)) {\n            next();\n        } else {\n            res.status(403).json({\n                message: 'Access denied'\n            });\n        }\n    };\n};\n// Middleware Runner - untuk menjalankan multiple middleware\nconst runMiddleware = (req, res, fn)=>{\n    return new Promise((resolve, reject)=>{\n        fn(req, res, (result)=>{\n            if (result instanceof Error) {\n                return reject(result);\n            }\n            return resolve(result);\n        });\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9taWRkbGV3YXJlL2F1dGgudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEseUJBQXlCO0FBQ007QUF1Qi9CLE1BQU1DLFlBQVlDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUU1QyxnQ0FBZ0M7QUFDekIsTUFBTUMsa0JBQXNDLENBQUNDLEtBQUtDLEtBQUtDO0lBQzVELElBQUlDLFFBQVFILElBQUlJLE9BQU8sQ0FBQ0MsU0FBUyxJQUFJTCxJQUFJTSxPQUFPLENBQUMsZ0JBQWdCO0lBRWpFLElBQUlILE9BQU87UUFDVCxJQUFJQSxNQUFNSSxVQUFVLENBQUMsWUFBWTtZQUMvQkosUUFBUUEsTUFBTUssS0FBSyxDQUFDLEdBQUdMLE1BQU1NLE1BQU07UUFDckM7UUFFQWYsMERBQVUsQ0FBQ1MsT0FBT1IsV0FBVyxDQUFDZ0IsS0FBVUM7WUFDdENDLFFBQVFDLEdBQUcsQ0FBQztZQUNaLElBQUlILEtBQUs7Z0JBQ1BFLFFBQVFFLEtBQUssQ0FBQywyQkFBMkJKO2dCQUN6QyxPQUFPVixJQUFJZSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO29CQUFFQyxTQUFTO2dCQUFZO1lBQ3JEO1lBQ0FsQixJQUFJWSxJQUFJLEdBQUdBO1lBQ1hWO1FBQ0Y7SUFDRixPQUFPO1FBQ0xELElBQUllLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7WUFBRUMsU0FBUztRQUFlO0lBQ2pEO0FBQ0YsRUFBRTtBQUVGLHlDQUF5QztBQUNsQyxNQUFNQywwQkFBOEMsQ0FBQ25CLEtBQUtDLEtBQUtDO0lBQ3BFLElBQUlDLFFBQVFILElBQUlJLE9BQU8sQ0FBQ0MsU0FBUyxJQUFJTCxJQUFJTSxPQUFPLENBQUMsZ0JBQWdCO0lBRWpFLElBQUlILE9BQU87UUFDVCxJQUFJQSxNQUFNSSxVQUFVLENBQUMsWUFBWTtZQUMvQkosUUFBUUEsTUFBTUssS0FBSyxDQUFDO1FBQ3RCO1FBRUFkLDBEQUFVLENBQUNTLE9BQU9SLFdBQVcsQ0FBQ2dCLEtBQVVDO1lBQ3RDLElBQUksQ0FBQ0QsS0FBSztnQkFDUlgsSUFBSVksSUFBSSxHQUFHQTtZQUNiO1lBQ0FWO1FBQ0Y7SUFDRixPQUFPO1FBQ0xBO0lBQ0Y7QUFDRixFQUFFO0FBRUYsdUNBQXVDO0FBQ2hDLE1BQU1rQixtQkFBbUIsQ0FBQ0M7SUFDL0IsT0FBTyxDQUFDckIsS0FBS0MsS0FBS0M7UUFDaEIsSUFBSUYsSUFBSVksSUFBSSxJQUFJUyxNQUFNQyxRQUFRLENBQUN0QixJQUFJWSxJQUFJLENBQUNXLElBQUksR0FBRztZQUM3Q3JCO1FBQ0YsT0FBTztZQUNMRCxJQUFJZSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO2dCQUFFQyxTQUFTO1lBQWdCO1FBQ2xEO0lBQ0Y7QUFDRixFQUFFO0FBRUYsNERBQTREO0FBQ3JELE1BQU1NLGdCQUFnQixDQUMzQnhCLEtBQ0FDLEtBQ0F3QjtJQUVBLE9BQU8sSUFBSUMsUUFBUSxDQUFDQyxTQUFTQztRQUMzQkgsR0FBR3pCLEtBQUtDLEtBQUssQ0FBQzRCO1lBQ1osSUFBSUEsa0JBQWtCQyxPQUFPO2dCQUMzQixPQUFPRixPQUFPQztZQUNoQjtZQUNBLE9BQU9GLFFBQVFFO1FBQ2pCO0lBQ0Y7QUFDRixFQUFFIiwic291cmNlcyI6WyJEOlxcTGF0aWhhblxcTmV3IGZvbGRlciAoMilcXEZFXFwxXFxGRVxcTmV4dFxcZnV0dXJlZHVcXGxpYlxcbWlkZGxld2FyZVxcYXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBsaWIvbWlkZGxld2FyZS9hdXRoLnRzXHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJztcclxuaW1wb3J0IHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gJ25leHQnO1xyXG5cclxuLy8gVHlwZXNcclxuZXhwb3J0IGludGVyZmFjZSBVc2VyIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIGVtYWlsOiBzdHJpbmc7XHJcbiAgcm9sZTogc3RyaW5nO1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBBdXRoZW50aWNhdGVkUmVxdWVzdCBleHRlbmRzIE5leHRBcGlSZXF1ZXN0IHtcclxuICB1c2VyPzogVXNlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTmV4dEhhbmRsZXIgPSAoKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcclxuXHJcbmV4cG9ydCB0eXBlIE1pZGRsZXdhcmVGdW5jdGlvbiA9IChcclxuICByZXE6IEF1dGhlbnRpY2F0ZWRSZXF1ZXN0LFxyXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlLFxyXG4gIG5leHQ6IE5leHRIYW5kbGVyXHJcbikgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XHJcblxyXG5jb25zdCBzZWNyZXRLZXkgPSBwcm9jZXNzLmVudi5KV1RfU0VDUkVUX0tFWSE7XHJcblxyXG4vLyBKV1QgQXV0aGVudGljYXRpb24gTWlkZGxld2FyZVxyXG5leHBvcnQgY29uc3QgYXV0aGVudGljYXRlSldUOiBNaWRkbGV3YXJlRnVuY3Rpb24gPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICBsZXQgdG9rZW4gPSByZXEuY29va2llcy5hdXRoVG9rZW4gfHwgcmVxLmhlYWRlcnNbJ2F1dGhvcml6YXRpb24nXSBhcyBzdHJpbmc7XHJcblxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgaWYgKHRva2VuLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xyXG4gICAgICB0b2tlbiA9IHRva2VuLnNsaWNlKDcsIHRva2VuLmxlbmd0aCk7XHJcbiAgICB9XHJcblxyXG4gICAgand0LnZlcmlmeSh0b2tlbiwgc2VjcmV0S2V5LCAoZXJyOiBhbnksIHVzZXI6IGFueSkgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZygnVmVyaWZ5aW5nIHRva2VuLi4uJyk7XHJcbiAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdKV1QgVmVyaWZpY2F0aW9uIEVycm9yOicsIGVycik7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNDAzKS5qc29uKHsgbWVzc2FnZTogJ0ZvcmJpZGRlbicgfSk7XHJcbiAgICAgIH1cclxuICAgICAgcmVxLnVzZXIgPSB1c2VyIGFzIFVzZXI7XHJcbiAgICAgIG5leHQoKTtcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICByZXMuc3RhdHVzKDQwMSkuanNvbih7IG1lc3NhZ2U6ICdVbmF1dGhvcml6ZWQnIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIE9wdGlvbmFsIEpXVCBBdXRoZW50aWNhdGlvbiBNaWRkbGV3YXJlXHJcbmV4cG9ydCBjb25zdCBvcHRpb25hbEF1dGhlbnRpY2F0ZUpXVDogTWlkZGxld2FyZUZ1bmN0aW9uID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgbGV0IHRva2VuID0gcmVxLmNvb2tpZXMuYXV0aFRva2VuIHx8IHJlcS5oZWFkZXJzWydhdXRob3JpemF0aW9uJ10gYXMgc3RyaW5nO1xyXG4gIFxyXG4gIGlmICh0b2tlbikge1xyXG4gICAgaWYgKHRva2VuLnN0YXJ0c1dpdGgoJ0JlYXJlciAnKSkge1xyXG4gICAgICB0b2tlbiA9IHRva2VuLnNsaWNlKDcpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBqd3QudmVyaWZ5KHRva2VuLCBzZWNyZXRLZXksIChlcnI6IGFueSwgdXNlcjogYW55KSA9PiB7XHJcbiAgICAgIGlmICghZXJyKSB7XHJcbiAgICAgICAgcmVxLnVzZXIgPSB1c2VyIGFzIFVzZXI7XHJcbiAgICAgIH1cclxuICAgICAgbmV4dCgpO1xyXG4gICAgfSk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG5leHQoKTtcclxuICB9XHJcbn07XHJcblxyXG4vLyBSb2xlLWJhc2VkIEF1dGhlbnRpY2F0aW9uIE1pZGRsZXdhcmVcclxuZXhwb3J0IGNvbnN0IGF1dGhlbnRpY2F0ZVJvbGUgPSAocm9sZXM6IHN0cmluZ1tdKTogTWlkZGxld2FyZUZ1bmN0aW9uID0+IHtcclxuICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICBpZiAocmVxLnVzZXIgJiYgcm9sZXMuaW5jbHVkZXMocmVxLnVzZXIucm9sZSkpIHtcclxuICAgICAgbmV4dCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oeyBtZXNzYWdlOiAnQWNjZXNzIGRlbmllZCcgfSk7XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuXHJcbi8vIE1pZGRsZXdhcmUgUnVubmVyIC0gdW50dWsgbWVuamFsYW5rYW4gbXVsdGlwbGUgbWlkZGxld2FyZVxyXG5leHBvcnQgY29uc3QgcnVuTWlkZGxld2FyZSA9IChcclxuICByZXE6IEF1dGhlbnRpY2F0ZWRSZXF1ZXN0LFxyXG4gIHJlczogTmV4dEFwaVJlc3BvbnNlLFxyXG4gIGZuOiBNaWRkbGV3YXJlRnVuY3Rpb25cclxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XHJcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIGZuKHJlcSwgcmVzLCAocmVzdWx0OiBhbnkpID0+IHtcclxuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlamVjdChyZXN1bHQpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufTsiXSwibmFtZXMiOlsiand0Iiwic2VjcmV0S2V5IiwicHJvY2VzcyIsImVudiIsIkpXVF9TRUNSRVRfS0VZIiwiYXV0aGVudGljYXRlSldUIiwicmVxIiwicmVzIiwibmV4dCIsInRva2VuIiwiY29va2llcyIsImF1dGhUb2tlbiIsImhlYWRlcnMiLCJzdGFydHNXaXRoIiwic2xpY2UiLCJsZW5ndGgiLCJ2ZXJpZnkiLCJlcnIiLCJ1c2VyIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwic3RhdHVzIiwianNvbiIsIm1lc3NhZ2UiLCJvcHRpb25hbEF1dGhlbnRpY2F0ZUpXVCIsImF1dGhlbnRpY2F0ZVJvbGUiLCJyb2xlcyIsImluY2x1ZGVzIiwicm9sZSIsInJ1bk1pZGRsZXdhcmUiLCJmbiIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicmVzdWx0IiwiRXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/middleware/auth.ts\n");

/***/ }),

/***/ "(api-node)/./models/examTypes.model.ts":
/*!***********************************!*\
  !*** ./models/examTypes.model.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createExamType: () => (/* binding */ createExamType),\n/* harmony export */   deleteExamType: () => (/* binding */ deleteExamType),\n/* harmony export */   getAllExamTypes: () => (/* binding */ getAllExamTypes),\n/* harmony export */   getExamTypeById: () => (/* binding */ getExamTypeById),\n/* harmony export */   getSubtopicsInfo: () => (/* binding */ getSubtopicsInfo),\n/* harmony export */   searchExamTypes: () => (/* binding */ searchExamTypes),\n/* harmony export */   updateExamType: () => (/* binding */ updateExamType)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/db */ \"(api-node)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// models/examTypes.model.ts\n\nconst getAllExamTypes = async (options = {})=>{\n    const { sortField = 'name', sortOrder = 'asc', page = 1, limit = 10 } = options;\n    const offset = (page - 1) * limit;\n    let query = `\n    SELECT id, name, code, COUNT(*) OVER() AS total\n    FROM exam_types\n  `;\n    const values = [];\n    const validSortFields = [\n        'id',\n        'name',\n        'code'\n    ];\n    if (validSortFields.includes(sortField.toLowerCase()) && [\n        'asc',\n        'desc'\n    ].includes(sortOrder.toLowerCase())) {\n        query += ` ORDER BY ${sortField} ${sortOrder.toUpperCase()}`;\n    } else {\n        query += ` ORDER BY name ASC`;\n    }\n    query += ` LIMIT $${values.length + 1} OFFSET $${values.length + 2}`;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, [\n            limit,\n            offset\n        ]);\n        return {\n            examTypes: result.rows,\n            total: result.rows.length > 0 ? parseInt(result.rows[0].total) : 0\n        };\n    } catch (error) {\n        console.error('Error getting all exam types:', error);\n        throw error;\n    }\n};\nconst getExamTypeById = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT id, name, code FROM exam_types WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error getting exam type by id:', error);\n        throw error;\n    }\n};\nconst createExamType = async (data)=>{\n    const { name, description, code, kind, master_id, create_user_id } = data;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`INSERT INTO exam_types (name, description, code, kind, master_id, create_user_id, create_date)\n       VALUES ($1, $2, $3, $4, $5, $6, NOW())\n       RETURNING id, name, code`, [\n            name,\n            description,\n            code,\n            kind,\n            master_id,\n            create_user_id\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error creating exam type:', error);\n        throw error;\n    }\n};\nconst updateExamType = async (id, data)=>{\n    const { name, description, code, kind, master_id, edit_user_id } = data;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`UPDATE exam_types \n       SET name = $1, description = $2, code = $3, kind = $4, master_id = $5,\n           edit_user_id = $6, edit_date = NOW()\n       WHERE id = $7\n       RETURNING id, name, code`, [\n            name,\n            description,\n            code,\n            kind,\n            master_id,\n            edit_user_id,\n            id\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error updating exam type:', error);\n        throw error;\n    }\n};\nconst deleteExamType = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('DELETE FROM exam_types WHERE id = $1 RETURNING id', [\n            id\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error deleting exam type:', error);\n        throw error;\n    }\n};\nconst searchExamTypes = async (options = {})=>{\n    const { search = '', kind, sortField = 'id', sortOrder = 'asc', page = 1, limit = 10, masterId } = options;\n    if (kind === undefined) {\n        throw new Error('Kind parameter is required');\n    }\n    const offset = (page - 1) * limit;\n    let query = `\n    SELECT \n      et.id, \n      et.name, \n      et.code, \n      COUNT(*) OVER() AS total\n      ${kind == 3 ? `, COALESCE((\n        SELECT MAX(CAST(SUBSTRING(q.code FROM 8 FOR 4) AS INTEGER)) + 1\n        FROM questions q\n        WHERE SUBSTRING(q.code FROM 6 FOR 2) = et.code\n      ), 1) AS \"NextID\"` : ''}\n    FROM exam_types et\n    WHERE (et.name ILIKE $1 OR et.description ILIKE $1 OR et.code ILIKE $1)\n    AND kind = $2\n  `;\n    const values = [\n        `%${search}%`,\n        kind\n    ];\n    // Tambahkan kondisi master_id jika masterId tersedia\n    if (masterId !== undefined && masterId !== null) {\n        query += ` AND et.master_id = $${values.length + 1}`;\n        values.push(masterId);\n    }\n    const validSortFields = [\n        'id',\n        'name',\n        'code'\n    ];\n    if (validSortFields.includes(sortField.toLowerCase()) && [\n        'asc',\n        'desc'\n    ].includes(sortOrder.toLowerCase())) {\n        query += ` ORDER BY ${sortField} ${sortOrder.toUpperCase()}`;\n    } else {\n        query += ` ORDER BY name ASC`;\n    }\n    query += ` LIMIT $${values.length + 1} OFFSET $${values.length + 2}`;\n    values.push(limit, offset);\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n        return {\n            examTypes: result.rows,\n            total: result.rows.length > 0 ? parseInt(result.rows[0].total) : 0\n        };\n    } catch (error) {\n        console.error('Error searching exam types:', error);\n        throw error;\n    }\n};\nconst getSubtopicsInfo = async (subtopicIds)=>{\n    if (!subtopicIds.length) return [];\n    const placeholders = subtopicIds.map((_, i)=>`$${i + 1}`).join(',');\n    const query = `\n    WITH subtopics AS (\n      SELECT \n        et.id,\n        et.code AS sub_code,\n        et.master_id AS top_id,\n        (SELECT MAX(CAST(SUBSTRING(q.code FROM 8 FOR 4) AS INTEGER)) \n          FROM questions q \n          WHERE q.question_topic_type = et.id) AS last_sequence\n      FROM exam_types et\n      WHERE et.id IN (${placeholders})\n    ),\n    topics AS (\n      SELECT\n        t.id,\n        t.code AS top_code,\n        t.master_id AS bid_id\n      FROM exam_types t\n      WHERE t.id IN (SELECT top_id FROM subtopics)\n    ),\n    bids AS (\n      SELECT\n        b.id,\n        b.code AS bid_code\n      FROM exam_types b\n      WHERE b.id IN (SELECT bid_id FROM topics)\n    )\n    SELECT\n      s.id,\n      s.sub_code,\n      s.last_sequence,\n      t.top_code,\n      b.bid_code\n    FROM subtopics s\n    JOIN topics t ON s.top_id = t.id\n    JOIN bids b ON t.bid_id = b.id\n  `;\n    const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, subtopicIds);\n    return result.rows;\n};\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/examTypes.model.ts\n");

/***/ }),

/***/ "(api-node)/./models/questions.model.ts":
/*!***********************************!*\
  !*** ./models/questions.model.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   appendExamIdToQuestion: () => (/* binding */ appendExamIdToQuestion),\n/* harmony export */   createBulkQuestions: () => (/* binding */ createBulkQuestions),\n/* harmony export */   createPassage: () => (/* binding */ createPassage),\n/* harmony export */   createQuestion: () => (/* binding */ createQuestion),\n/* harmony export */   deleteQuestion: () => (/* binding */ deleteQuestion),\n/* harmony export */   getAllQuestions: () => (/* binding */ getAllQuestions),\n/* harmony export */   getDiagnosticQuestionsByExamString: () => (/* binding */ getDiagnosticQuestionsByExamString),\n/* harmony export */   getPagedQuestions: () => (/* binding */ getPagedQuestions),\n/* harmony export */   getPassageById: () => (/* binding */ getPassageById),\n/* harmony export */   getQuestionById: () => (/* binding */ getQuestionById),\n/* harmony export */   getQuestionByUId: () => (/* binding */ getQuestionByUId),\n/* harmony export */   getQuestionsByExamId: () => (/* binding */ getQuestionsByExamId),\n/* harmony export */   getQuestionsByExamString: () => (/* binding */ getQuestionsByExamString),\n/* harmony export */   getTotalQuestions: () => (/* binding */ getTotalQuestions),\n/* harmony export */   searchPassages: () => (/* binding */ searchPassages),\n/* harmony export */   searchQuestionsByCodeOrId: () => (/* binding */ searchQuestionsByCodeOrId),\n/* harmony export */   updateBulkQuestions: () => (/* binding */ updateBulkQuestions),\n/* harmony export */   updatePassage: () => (/* binding */ updatePassage),\n/* harmony export */   updateQuestion: () => (/* binding */ updateQuestion),\n/* harmony export */   verifyIdCodePairs: () => (/* binding */ verifyIdCodePairs)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/db */ \"(api-node)/./lib/db.ts\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// models/questions.model.ts\n\n\n// Helper Functions\nconst shuffleArray = (array, seed)=>{\n    const result = [\n        ...array\n    ];\n    let currentIndex = result.length;\n    let temporaryValue, randomIndex;\n    // Use seed for reproducible randomness\n    const random = ()=>{\n        const x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    };\n    while(0 !== currentIndex){\n        randomIndex = Math.floor(random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = result[currentIndex];\n        result[currentIndex] = result[randomIndex];\n        result[randomIndex] = temporaryValue;\n    }\n    return result;\n};\nconst makeSeed = (examString, level)=>{\n    const nonce = crypto__WEBPACK_IMPORTED_MODULE_1__.randomBytes(4).readUInt32LE(0);\n    const hash = crypto__WEBPACK_IMPORTED_MODULE_1__.createHash('sha256').update(`${examString}-${level}-${nonce}`).digest();\n    return hash.readUInt32LE(0) & 0x7fffffff;\n};\n// Model Functions\nconst searchQuestionsByCodeOrId = async (search)=>{\n    try {\n        if (!search || search.trim() === '') {\n            return [];\n        }\n        const query = `\n      SELECT id, code\n      FROM   questions\n      WHERE  code ILIKE $1 OR CAST(id AS text) ILIKE $1\n      ORDER  BY md5(id::text)\n      LIMIT  15;\n    `;\n        const values = [\n            `%${search}%`\n        ];\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n        return result.rows.map((row)=>({\n                id: row.id,\n                code: row.code\n            }));\n    } catch (error) {\n        console.error('Error searching questions by code or id:', error);\n        throw error;\n    }\n};\nconst getAllQuestions = async ()=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM questions ORDER BY id');\n        return result.rows;\n    } catch (error) {\n        console.error('Error fetching questions:', error);\n        throw error;\n    }\n};\nconst getPagedQuestions = async (filters)=>{\n    const { page = 1, limit = 50, search = '', question_type = 'All', exam_id, topic, subtopic, creator, start_date, end_date, sortKey = 'q.id', sortOrder = 'asc', userId } = filters;\n    const offset = (page - 1) * limit;\n    const allowedSortKeys = [\n        'q.id',\n        'question_type',\n        'question_text',\n        'correct_answer',\n        'topic',\n        'subtopic',\n        'creator',\n        'create_date',\n        'editor',\n        'edit_date'\n    ];\n    const validatedSortKey = allowedSortKeys.includes(sortKey) ? sortKey : 'q.id';\n    const validatedSortOrder = sortOrder.toLowerCase() === 'desc' ? 'DESC' : 'ASC';\n    const baseSelectClause = `\n    SELECT \n      q.id,\n      ARRAY_AGG(e.id) AS exam_id,\n      ARRAY_AGG(e.name) AS exam_name,\n      q.question_type,\n      q.question_text,\n      q.options,\n      q.correct_answer,\n      et.name AS subtopic,\n      et2.name AS topic,\n      COALESCE(u.name, 'admin') AS creator,\n      q.create_date::date AS create_date,\n      u2.name AS editor,\n      q.edit_date::date AS edit_date,\n      q.pembahasan,\n      pg.title,\n      pg.passage\n  `;\n    const baseFromClause = `\n    FROM questions q\n    LEFT JOIN exams e ON q.id = ANY(e.question_id_list)\n    LEFT JOIN v_dashboard_userdata u ON u.userid = q.create_user_id\n    LEFT JOIN v_dashboard_userdata u2 ON u2.userid = q.edit_user_id\n    LEFT JOIN exam_types et ON et.id = q.question_topic_type\n    LEFT JOIN exam_types et2 ON et2.id = et.id\n    LEFT Join question_passages pg on pg.id = q.passage_id\n  `;\n    let whereClauses = [];\n    let values = [];\n    let valueIndex = 1;\n    let filterParamsCount = 0;\n    if (search) {\n        whereClauses.push(`(q.question_text ILIKE $${valueIndex} OR CAST(q.id AS TEXT) ILIKE $${valueIndex})`);\n        values.push(`%${search}%`);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (question_type && question_type !== 'All') {\n        whereClauses.push(`q.question_type = $${valueIndex}`);\n        values.push(question_type);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (exam_id) {\n        whereClauses.push(`q.id = ANY(SELECT question_id_list FROM exams WHERE id = $${valueIndex})`);\n        values.push(exam_id);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (topic) {\n        whereClauses.push(`et2.name = $${valueIndex}`);\n        values.push(topic);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (subtopic) {\n        whereClauses.push(`et.name = $${valueIndex}`);\n        values.push(subtopic);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (creator) {\n        whereClauses.push(`u.name = $${valueIndex}`);\n        values.push(creator);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (start_date) {\n        whereClauses.push(`q.create_date::date >= $${valueIndex}`);\n        values.push(start_date);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (end_date) {\n        whereClauses.push(`q.create_date::date <= $${valueIndex}`);\n        values.push(end_date);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    if (userId) {\n        whereClauses.push(`(q.create_user_id = $${valueIndex} OR q.edit_user_id = $${valueIndex})`);\n        values.push(userId);\n        valueIndex++;\n        filterParamsCount++;\n    }\n    let whereClause = whereClauses.length > 0 ? ' WHERE ' + whereClauses.join(' AND ') : '';\n    const mainQuery = `\n    ${baseSelectClause}\n    ${baseFromClause}\n    ${whereClause}\n    GROUP BY q.id, q.question_type, q.question_text, q.options, q.correct_answer, \n            et.name, et2.name, u.name, q.create_date, u2.name, q.edit_date, q.pembahasan,\n      pg.title,\n      pg.passage\n    ORDER BY ${validatedSortKey} ${validatedSortOrder}\n    LIMIT $${valueIndex} OFFSET $${valueIndex + 1}\n  `;\n    values.push(limit, offset);\n    const countQuery = `\n    SELECT COUNT(*) AS total\n    FROM (\n      SELECT q.id\n      ${baseFromClause}\n      ${whereClause}\n      GROUP BY q.id\n    ) AS sub\n  `;\n    try {\n        const [dataResult, countResult] = await Promise.all([\n            _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(mainQuery, values),\n            _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(countQuery, values.slice(0, filterParamsCount))\n        ]);\n        const total = parseInt(countResult.rows[0].total, 10);\n        const totalPages = Math.ceil(total / limit);\n        return {\n            data: dataResult.rows,\n            total,\n            totalPages\n        };\n    } catch (error) {\n        console.error('Error fetching paged questions:', error);\n        throw error;\n    }\n};\nconst getTotalQuestions = async ({ search, type, examId, userId })=>{\n    try {\n        let query = `\n      SELECT COUNT(DISTINCT q.id) AS total\n      FROM questions q\n      LEFT JOIN exams e ON q.id = ANY(e.question_id_list)\n      WHERE 1=1\n    `;\n        const params = [];\n        let paramIndex = 1;\n        if (search) {\n            query += ` AND (q.question_text ILIKE $${paramIndex} OR CAST(q.id AS TEXT) ILIKE $${paramIndex})`;\n            params.push(`%${search}%`);\n            paramIndex++;\n        }\n        if (type && type !== 'All') {\n            query += ` AND q.question_type = $${paramIndex}`;\n            params.push(type);\n            paramIndex++;\n        }\n        if (examId) {\n            query += ` AND q.id = ANY(SELECT question_id_list FROM exams WHERE id = $${paramIndex})`;\n            params.push(examId);\n            paramIndex++;\n        }\n        if (userId) {\n            query += ` AND (q.create_user_id = $${paramIndex} OR q.edit_user_id = $${paramIndex})`;\n            params.push(userId);\n            paramIndex++;\n        }\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, params);\n        return parseInt(result.rows[0].total, 10);\n    } catch (error) {\n        console.error('Error fetching total questions:', error);\n        throw error;\n    }\n};\nconst getDiagnosticQuestionsByExamString = async (exam_string)=>{\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].connect();\n    try {\n        const examRes = await client.query(`SELECT id, duration,\n              level_1_question_qty,\n              level_2_question_qty,\n              level_3_question_qty,\n              level_4_question_qty, \n              level_5_question_qty,\n              question_id_list\n       FROM   exams\n       WHERE  exam_string = $1`, [\n            exam_string\n        ]);\n        if (!examRes.rowCount) throw new Error('Exam not found');\n        const exam = examRes.rows[0];\n        const qRes = await client.query(`SELECT *\n       FROM   questions\n       WHERE  id = ANY($1::int[])`, [\n            exam.question_id_list\n        ]);\n        const grouped = {};\n        for (const q of qRes.rows){\n            const lvl = q.level;\n            (grouped[lvl] ??= []).push(q);\n        }\n        const spec = [\n            {\n                lvl: 1,\n                qty: exam.level_1_question_qty\n            },\n            {\n                lvl: 2,\n                qty: exam.level_2_question_qty\n            },\n            {\n                lvl: 3,\n                qty: exam.level_3_question_qty\n            },\n            {\n                lvl: 4,\n                qty: exam.level_4_question_qty\n            },\n            {\n                lvl: 5,\n                qty: exam.level_5_question_qty\n            }\n        ];\n        const finalQuestions = [];\n        for (const { lvl, qty } of spec){\n            const poolForLvl = grouped[lvl] ?? [];\n            if (!poolForLvl.length) continue;\n            const shuffled = shuffleArray(poolForLvl, makeSeed(exam_string, lvl));\n            finalQuestions.push(...shuffled.slice(0, qty || shuffled.length));\n        }\n        return {\n            duration: exam.duration,\n            questions: finalQuestions.map((q)=>({\n                    id: q.id,\n                    level: q.level,\n                    type: q.question_type,\n                    question: q.question_text,\n                    options: q.options,\n                    correct: q.correct_answer,\n                    statements: q.statements\n                }))\n        };\n    } finally{\n        client.release();\n    }\n};\nconst getQuestionsByExamString = async (exam_string)=>{\n    try {\n        const examResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM exams WHERE exam_string = $1', [\n            exam_string\n        ]);\n        if (examResult.rows.length === 0) {\n            throw new Error('Exam not found');\n        }\n        const examId = examResult.rows[0].id;\n        const query = `\n      SELECT q.*\n      FROM questions q\n      WHERE q.id = ANY (\n        SELECT unnest(question_id_list)\n        FROM exams\n        WHERE id = $1\n      )\n      ORDER BY q.id\n    `;\n        const questionsResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, [\n            examId\n        ]);\n        return {\n            duration: examResult.rows[0].duration,\n            questions: questionsResult.rows.map((q)=>({\n                    id: q.id,\n                    type: q.question_type,\n                    question: q.question_text,\n                    options: q.options,\n                    correct: q.correct_answer,\n                    statements: q.statements\n                }))\n        };\n    } catch (error) {\n        console.error('Error fetching questions by exam_string:', error);\n        throw error;\n    }\n};\nconst getQuestionsByExamId = async (examId)=>{\n    try {\n        const query = `\n      SELECT q.*\n      FROM questions q\n      WHERE q.id = ANY (\n        SELECT unnest(question_id_list)\n        FROM exams\n        WHERE id = $1\n      )\n      ORDER BY q.id\n    `;\n        const questionsResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, [\n            examId\n        ]);\n        return {\n            questions: questionsResult.rows.map((q)=>({\n                    id: q.id,\n                    type: q.question_type,\n                    question: q.question_text,\n                    options: q.options,\n                    correct: q.correct_answer,\n                    statements: q.statements\n                }))\n        };\n    } catch (error) {\n        console.error('Error fetching questions by examId:', error);\n        throw error;\n    }\n};\nconst getQuestionById = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM questions WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error fetching question:', error);\n        throw error;\n    }\n};\nconst getQuestionByUId = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT id, question_type, question_text,options, statements, level FROM questions WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error fetching question:', error);\n        throw error;\n    }\n};\nconst createQuestion = async (questionData, create_user_id)=>{\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].connect();\n    try {\n        const defaultPembahasan = `\n    <div>\n      <h4>Pembahasan belum tersedia secara spesifik.</h4>\n      <p>Silakan cek kembali soal dan diskusikan dengan pengajar atau teman sekelas.</p>\n    </div>\n    `;\n        const insertQuery = `\n      INSERT INTO questions \n        (question_topic_type, question_type, question_text, options, correct_answer, statements, passage_id, code, create_user_id, pembahasan, level) \n      VALUES \n        ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) \n      RETURNING *\n    `;\n        const { question_topic_type, question_type, question_text, options, correct_answer, statements, passage_id, code, pembahasan, level } = questionData;\n        const result = await client.query(insertQuery, [\n            question_topic_type,\n            question_type,\n            question_text,\n            options,\n            correct_answer,\n            statements,\n            passage_id,\n            code,\n            create_user_id,\n            pembahasan || defaultPembahasan,\n            level\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error creating question:', error);\n        throw error;\n    } finally{\n        client.release();\n    }\n};\nconst createBulkQuestions = async (questions, create_user_id)=>{\n    try {\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('BEGIN');\n        const createdQuestions = [];\n        const insertQuery = `\n      INSERT INTO questions \n        (exam_id, question_type, question_text, options, correct_answer, statements, create_user_id, question_topic_type, edit_date) \n      VALUES \n        ($1, $2, $3, $4, $5, $6, $7, $8, null) \n      RETURNING *\n    `;\n        for (const question of questions){\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(insertQuery, [\n                question.exam_id,\n                question.question_type,\n                question.question_text,\n                question.options,\n                question.correct_answer,\n                question.statements,\n                create_user_id,\n                question.question_topic_type\n            ]);\n            createdQuestions.push(result.rows[0]);\n        }\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('COMMIT');\n        return createdQuestions;\n    } catch (error) {\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('ROLLBACK');\n        console.error('Error in bulk question creation:', error);\n        throw error;\n    }\n};\nconst updateQuestion = async (id, questionData, edit_user_id)=>{\n    const { question_text, question_type, options, correct_answer, statements, question_topic_type } = questionData;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`UPDATE questions \n      SET \n        question_text = $1, \n        question_type = $2, \n        options = $3::text[], \n        correct_answer = $4::text[], \n        statements = $5::text[],\n        edit_user_id = $6,\n        edit_date = NOW(),\n        question_topic_type = $8\n      WHERE id = $7 \n      RETURNING *`, [\n            question_text,\n            question_type,\n            options,\n            correct_answer,\n            statements,\n            edit_user_id,\n            id,\n            question_topic_type\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error updating question:', error);\n        throw error;\n    }\n};\nconst updateBulkQuestions = async (questions, edit_user_id)=>{\n    try {\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('BEGIN');\n        const updatedQuestions = [];\n        const updateQuery = `\n      UPDATE questions \n      SET \n        exam_id = $1,\n        question_type = $2,\n        question_text = $3,\n        options = $4,\n        correct_answer = $5,\n        statements = $6,\n        edit_user_id = $7,\n        question_topic_type = $8,\n        edit_date = CURRENT_TIMESTAMP\n      WHERE id = $9\n      RETURNING *\n    `;\n        for (const question of questions){\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(updateQuery, [\n                question.exam_id,\n                question.question_type,\n                question.question_text,\n                question.options,\n                question.correct_answer,\n                question.statements,\n                edit_user_id,\n                question.question_topic_type,\n                question.id\n            ]);\n            if (result.rows.length === 0) {\n                throw new Error(`Question with ID ${question.id} not found`);\n            }\n            updatedQuestions.push(result.rows[0]);\n        }\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('COMMIT');\n        return updatedQuestions;\n    } catch (error) {\n        await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('ROLLBACK');\n        console.error('Error in bulk question update:', error);\n        throw error;\n    }\n};\nconst appendExamIdToQuestion = async (questionId, examId)=>{\n    try {\n        const questionCheck = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM questions WHERE id = $1', [\n            questionId\n        ]);\n        if (questionCheck.rows.length === 0) {\n            throw new Error('Question not found');\n        }\n        const examCheck = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM exams WHERE id = $1', [\n            examId\n        ]);\n        if (examCheck.rows.length === 0) {\n            throw new Error('Exam not found');\n        }\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`UPDATE questions\n      SET exam_id_list = array_append(COALESCE(exam_id_list, '{}'), $1::INTEGER)\n      WHERE id = $2\n      RETURNING *`, [\n            examId,\n            questionId\n        ]);\n        return {\n            id: result.rows[0].id,\n            exam_id_list: result.rows[0].exam_id_list\n        };\n    } catch (error) {\n        console.error('Error appending exam_id to question:', error);\n        throw error;\n    }\n};\nconst deleteQuestion = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('DELETE FROM questions WHERE id = $1 RETURNING *', [\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error deleting question:', error);\n        throw error;\n    }\n};\n// Question Passages Functions\nconst searchPassages = async (search)=>{\n    try {\n        if (!search || search.trim() === '') {\n            return [];\n        }\n        const query = `\n      SELECT id, title, passage\n      FROM question_passages\n      WHERE id::text ILIKE $1 OR title ILIKE $1\n      ORDER BY id\n      LIMIT 10\n    `;\n        const values = [\n            `%${search}%`\n        ];\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n        return result.rows;\n    } catch (error) {\n        console.error('Error searching passages:', error);\n        throw error;\n    }\n};\nconst getPassageById = async (id)=>{\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query('SELECT * FROM question_passages WHERE id = $1', [\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error fetching passage:', error);\n        throw error;\n    }\n};\nconst createPassage = async (passageData, create_user_id)=>{\n    const { title, passage } = passageData;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`INSERT INTO question_passages \n        (title, passage, create_user_id, create_date) \n      VALUES \n        ($1, $2, $3, NOW()) \n      RETURNING *`, [\n            title,\n            passage,\n            create_user_id\n        ]);\n        return result.rows[0];\n    } catch (error) {\n        console.error('Error creating passage:', error);\n        throw error;\n    }\n};\nconst updatePassage = async (id, passageData, update_user_id)=>{\n    const { title, passage } = passageData;\n    try {\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`UPDATE question_passages\n      SET \n        title = $1,\n        passage = $2,\n        update_user_id = $3,\n        update_date = NOW()\n      WHERE id = $4\n      RETURNING *`, [\n            title,\n            passage,\n            update_user_id,\n            id\n        ]);\n        return result.rows[0] || null;\n    } catch (error) {\n        console.error('Error updating passage:', error);\n        throw error;\n    }\n};\nconst verifyIdCodePairs = async (pairs)=>{\n    const client = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].connect();\n    try {\n        const results = [];\n        for (const pair of pairs){\n            const { id, code } = pair;\n            const selectQuery = `\n        SELECT id, code \n        FROM questions \n        WHERE id = $1\n      `;\n            const result = await client.query(selectQuery, [\n                id\n            ]);\n            if (result.rows.length === 0) {\n                results.push({\n                    id: id,\n                    code: code,\n                    status: 'id_not_found',\n                    found_code: null,\n                    is_match: false\n                });\n            } else {\n                const foundQuestion = result.rows[0];\n                const isMatch = foundQuestion.code === code;\n                results.push({\n                    id: id,\n                    code: code,\n                    status: isMatch ? 'match' : 'code_mismatch',\n                    found_code: foundQuestion.code,\n                    is_match: isMatch\n                });\n            }\n        }\n        const totalPairs = results.length;\n        const matchedPairs = results.filter((r)=>r.is_match).length;\n        const notFoundIds = results.filter((r)=>r.status === 'id_not_found').length;\n        const mismatchedCodes = results.filter((r)=>r.status === 'code_mismatch').length;\n        return {\n            results: results,\n            summary: {\n                total: totalPairs,\n                matched: matchedPairs,\n                id_not_found: notFoundIds,\n                code_mismatched: mismatchedCodes,\n                success_rate: totalPairs > 0 ? (matchedPairs / totalPairs * 100).toFixed(2) + '%' : '0%'\n            }\n        };\n    } catch (error) {\n        console.error('Error verifying ID-Code pairs:', error);\n        throw error;\n    } finally{\n        client.release();\n    }\n};\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/questions.model.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquestions%2Fpaged&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquestions%5Cpaged.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquestions%2Fpaged&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquestions%5Cpaged.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\questions\\paged.ts */ \"(api-node)/./pages/api/questions/paged.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/questions/paged\",\n        pathname: \"/api/questions/paged\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_questions_paged_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcXVlc3Rpb25zJTJGcGFnZWQmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyU1Q2FwaSU1Q3F1ZXN0aW9ucyU1Q3BhZ2VkLnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUErRjtBQUN2QztBQUNFO0FBQzFEO0FBQzhEO0FBQzlEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQywwREFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsMERBQVE7QUFDcEM7QUFDTyx3QkFBd0IseUdBQW1CO0FBQ2xEO0FBQ0EsY0FBYyxrRUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVELHFDIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxccXVlc3Rpb25zXFxcXHBhZ2VkLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9xdWVzdGlvbnMvcGFnZWRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9xdWVzdGlvbnMvcGFnZWRcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiAnJyxcbiAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquestions%2Fpaged&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquestions%5Cpaged.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/questions/paged.ts":
/*!**************************************!*\
  !*** ./pages/api/questions/paged.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_middleware_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/middleware/auth */ \"(api-node)/./lib/middleware/auth.ts\");\n/* harmony import */ var _controllers_questions_controller__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../controllers/questions.controller */ \"(api-node)/./controllers/questions.controller.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_controllers_questions_controller__WEBPACK_IMPORTED_MODULE_1__]);\n_controllers_questions_controller__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/questions/paged.ts\n\n\nasync function handler(req, res) {\n    // Apply authentication middleware\n    await (0,_lib_middleware_auth__WEBPACK_IMPORTED_MODULE_0__.runMiddleware)(req, res, _lib_middleware_auth__WEBPACK_IMPORTED_MODULE_0__.authenticateJWT);\n    switch(req.method){\n        case 'GET':\n            return _controllers_questions_controller__WEBPACK_IMPORTED_MODULE_1__.getPagedQuestions(req, res);\n        default:\n            res.setHeader('Allow', [\n                'GET'\n            ]);\n            return res.status(405).json({\n                error: `Method ${req.method} Not Allowed`\n            });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS9xdWVzdGlvbnMvcGFnZWQudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsK0JBQStCO0FBRXFFO0FBQ3BCO0FBRWpFLGVBQWVHLFFBQVFDLEdBQXlCLEVBQUVDLEdBQW9CO0lBQ25GLGtDQUFrQztJQUNsQyxNQUFNTCxtRUFBYUEsQ0FBQ0ksS0FBS0MsS0FBS0osaUVBQWVBO0lBRTdDLE9BQVFHLElBQUlFLE1BQU07UUFDaEIsS0FBSztZQUNILE9BQU9KLGdGQUFvQyxDQUFDRSxLQUFLQztRQUVuRDtZQUNFQSxJQUFJRyxTQUFTLENBQUMsU0FBUztnQkFBQzthQUFNO1lBQzlCLE9BQU9ILElBQUlJLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUM7Z0JBQUVDLE9BQU8sQ0FBQyxPQUFPLEVBQUVQLElBQUlFLE1BQU0sQ0FBQyxZQUFZLENBQUM7WUFBQztJQUM1RTtBQUNGIiwic291cmNlcyI6WyJEOlxcTGF0aWhhblxcTmV3IGZvbGRlciAoMilcXEZFXFwxXFxGRVxcTmV4dFxcZnV0dXJlZHVcXHBhZ2VzXFxhcGlcXHF1ZXN0aW9uc1xccGFnZWQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFnZXMvYXBpL3F1ZXN0aW9ucy9wYWdlZC50c1xyXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XHJcbmltcG9ydCB7IHJ1bk1pZGRsZXdhcmUsIGF1dGhlbnRpY2F0ZUpXVCwgQXV0aGVudGljYXRlZFJlcXVlc3QgfSBmcm9tICcuLi8uLi8uLi9saWIvbWlkZGxld2FyZS9hdXRoJztcclxuaW1wb3J0ICogYXMgcXVlc3Rpb25Db250cm9sbGVyIGZyb20gJy4uLy4uLy4uL2NvbnRyb2xsZXJzL3F1ZXN0aW9ucy5jb250cm9sbGVyJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBBdXRoZW50aWNhdGVkUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcclxuICAvLyBBcHBseSBhdXRoZW50aWNhdGlvbiBtaWRkbGV3YXJlXHJcbiAgYXdhaXQgcnVuTWlkZGxld2FyZShyZXEsIHJlcywgYXV0aGVudGljYXRlSldUKTtcclxuXHJcbiAgc3dpdGNoIChyZXEubWV0aG9kKSB7XHJcbiAgICBjYXNlICdHRVQnOlxyXG4gICAgICByZXR1cm4gcXVlc3Rpb25Db250cm9sbGVyLmdldFBhZ2VkUXVlc3Rpb25zKHJlcSwgcmVzKTtcclxuXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXMuc2V0SGVhZGVyKCdBbGxvdycsIFsnR0VUJ10pO1xyXG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmpzb24oeyBlcnJvcjogYE1ldGhvZCAke3JlcS5tZXRob2R9IE5vdCBBbGxvd2VkYCB9KTtcclxuICB9XHJcbn0iXSwibmFtZXMiOlsicnVuTWlkZGxld2FyZSIsImF1dGhlbnRpY2F0ZUpXVCIsInF1ZXN0aW9uQ29udHJvbGxlciIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJnZXRQYWdlZFF1ZXN0aW9ucyIsInNldEhlYWRlciIsInN0YXR1cyIsImpzb24iLCJlcnJvciJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/questions/paged.ts\n");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "p-queue":
/*!**************************!*\
  !*** external "p-queue" ***!
  \**************************/
/***/ ((module) => {

module.exports = import("p-queue");;

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fquestions%2Fpaged&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cquestions%5Cpaged.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();