"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/users/login";
exports.ids = ["pages/api/users/login"];
exports.modules = {

/***/ "(api-node)/./controllers/user.controller.ts":
/*!****************************************!*\
  !*** ./controllers/user.controller.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _models_user_model__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../models/user.model */ \"(api-node)/./models/user.model.ts\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jsonwebtoken */ \"jsonwebtoken\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_models_user_model__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_2__]);\n([_models_user_model__WEBPACK_IMPORTED_MODULE_0__, axios__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n// controllers/user.controller.ts\n\n\n\nconst secretKey = process.env.JWT_SECRET_KEY;\nconst refreshTokenSecret = process.env.REFRESH_TOKEN_SECRET;\nconst refreshTokens = [];\n// User Controller Class\nclass UserController {\n    // Create user with CAPTCHA\n    static async create(req, res) {\n        try {\n            if (!req.body) {\n                return res.status(400).json({\n                    message: \"Content cannot be empty!\"\n                });\n            }\n            const { username, email, password, captchaToken } = req.body;\n            // Verify CAPTCHA\n            try {\n                const response = await axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].post(`https://www.google.com/recaptcha/api/siteverify?secret=${process.env.RECAPTCHA_SECRET_KEY}&response=${captchaToken}`);\n                const { success } = response.data;\n                if (!success) {\n                    return res.status(400).json({\n                        message: \"CAPTCHA verification failed. Please try again.\"\n                    });\n                }\n            } catch (error) {\n                console.error(\"Error verifying CAPTCHA:\", error);\n                return res.status(500).json({\n                    message: \"Error verifying CAPTCHA.\"\n                });\n            }\n            // Create user\n            const user = {\n                username,\n                email,\n                password,\n                role: 'student'\n            };\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create(user);\n            res.status(201).json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: error.message || \"Some error occurred while creating the User.\"\n            });\n        }\n    }\n    // Get user status\n    static async getStatus(req, res) {\n        try {\n            const userId1 = req.user.id;\n            const cartCount = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getCartCount(parseInt(userId1));\n            const unpaidCount = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUnpaidCount(parseInt(userId1));\n            return res.json({\n                success: true,\n                cartCount,\n                unpaidCount\n            });\n        } catch (error) {\n            console.error(error);\n            return res.status(500).json({\n                success: false,\n                message: error.message\n            });\n        }\n    }\n    // Create user without CAPTCHA\n    static async createNoCaptcha(req, res) {\n        try {\n            if (!req.body) {\n                return res.status(400).json({\n                    message: \"Content cannot be empty!\"\n                });\n            }\n            const { username, fullName, email, password, role } = req.body;\n            // Validate input data\n            if (!username || !email || !password || !fullName) {\n                return res.status(400).json({\n                    message: \"Username, full name, email, and password are required!\"\n                });\n            }\n            // Default role if not provided\n            const userRole = role || 'student';\n            // Create user\n            const user = {\n                username,\n                fullName,\n                email,\n                password,\n                role: userRole\n            };\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create(user);\n            res.status(201).json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: error.message || \"Some error occurred while creating the User.\"\n            });\n        }\n    }\n    // Update user\n    static async updateUser(req, res) {\n        try {\n            console.log('start update user');\n            const userId1 = req.query.id;\n            const { username, email, oldPassword, newPassword } = req.body;\n            console.log(req.body);\n            console.log(req.query.id);\n            if (!username || !email || !oldPassword) {\n                return res.status(400).json({\n                    message: 'Username, email, and old password are required.'\n                });\n            }\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateUser(parseInt(userId1), {\n                username,\n                email,\n                oldPassword,\n                newPassword\n            });\n            res.status(200).json({\n                message: 'User updated successfully.',\n                data\n            });\n        } catch (error) {\n            if (error.kind === 'not_found') {\n                return res.status(404).json({\n                    message: 'User not found.'\n                });\n            }\n            if (error.message === 'Old password does not match') {\n                return res.status(400).json({\n                    message: 'Invalid old password.'\n                });\n            }\n            return res.status(500).json({\n                message: 'Error updating user.'\n            });\n        }\n    }\n    // Delete user by ID\n    static async deleteUser(req, res) {\n        try {\n            const userId1 = req.query.id;\n            await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].deleteUser(parseInt(userId1));\n            res.status(200).json({\n                message: `User with id ${userId1} was deleted successfully.`\n            });\n        } catch (error) {\n            if (error.kind === \"not_found\") {\n                return res.status(404).json({\n                    message: `User not found with id ${userId}`\n                });\n            }\n            return res.status(500).json({\n                message: `Could not delete user with id ${userId}`\n            });\n        }\n    }\n    // Login user\n    static async login(req, res) {\n        try {\n            const { username, password } = req.body;\n            const user = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].findByUsername(username);\n            if (!user) {\n                return res.status(404).json({\n                    message: \"User not found.\"\n                });\n            }\n            // Check if password matches\n            if (user.password !== password) {\n                return res.status(401).json({\n                    message: \"Invalid password.\"\n                });\n            }\n            await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].updateLastLogin(username);\n            // Create JWT token if login successful\n            const token = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n                id: user.id,\n                username: user.username,\n                role: user.role\n            }, secretKey, {\n                expiresIn: '6h'\n            });\n            const refreshToken = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n                id: user.id,\n                username: user.username,\n                role: user.role\n            }, refreshTokenSecret, {\n                expiresIn: '30d'\n            });\n            refreshTokens.push(refreshToken);\n            // Send token in cookie\n            res.setHeader('Set-Cookie', [\n                `authToken=${token}; HttpOnly; Secure=${\"development\" === 'production'}; SameSite=Strict; Max-Age=${6 * 60 * 60}; Path=/`,\n                `refreshToken=${refreshToken}; HttpOnly; Secure=${\"development\" === 'production'}; SameSite=Strict; Max-Age=${30 * 24 * 60 * 60}; Path=/`\n            ]);\n            res.json({\n                message: \"Login successful!\",\n                username: user.username,\n                role: user.role,\n                token\n            });\n        } catch (error) {\n            console.error(\"Error during login:\", error);\n            res.status(500).json({\n                message: \"An error occurred during login.\"\n            });\n        }\n    }\n    // Refresh token\n    static async refreshToken(req, res) {\n        try {\n            const refreshToken = req.cookies.refreshToken;\n            if (!refreshToken || !refreshTokens.includes(refreshToken)) {\n                return res.status(403).json({\n                    message: 'Forbidden'\n                });\n            }\n            const decoded = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().verify(refreshToken, refreshTokenSecret);\n            const newToken = jsonwebtoken__WEBPACK_IMPORTED_MODULE_1___default().sign({\n                id: decoded.id,\n                username: decoded.username,\n                role: decoded.role\n            }, secretKey, {\n                expiresIn: '6h'\n            });\n            res.setHeader('Set-Cookie', `authToken=${newToken}; HttpOnly; Secure=${\"development\" === 'production'}; SameSite=Strict; Max-Age=${6 * 60 * 60}; Path=/`);\n            res.json({\n                token: newToken\n            });\n        } catch (error) {\n            return res.status(403).json({\n                message: 'Forbidden'\n            });\n        }\n    }\n    // Logout user\n    static async logout(req, res) {\n        try {\n            const refreshToken = req.cookies.refreshToken;\n            const index = refreshTokens.indexOf(refreshToken);\n            if (index > -1) {\n                refreshTokens.splice(index, 1);\n            }\n            res.setHeader('Set-Cookie', [\n                `authToken=; HttpOnly; Secure=${\"development\" === 'production'}; SameSite=Strict; Max-Age=0; Path=/`,\n                `refreshToken=; HttpOnly; Secure=${\"development\" === 'production'}; SameSite=Strict; Max-Age=0; Path=/`\n            ]);\n            res.json({\n                message: \"Logout successful!\"\n            });\n        } catch (error) {\n            res.status(500).json({\n                message: error.message\n            });\n        }\n    }\n    // Find user by username\n    static async findByUsername(req, res) {\n        try {\n            const username = req.query.username;\n            console.log('Finding user by username:', username);\n            const user = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].findByUsername(username);\n            console.log('User found:', user);\n            res.json({\n                user_id: user.user_id,\n                id: user.id\n            });\n        } catch (error) {\n            console.error('Error finding user by username:', error);\n            if (error.kind === 'not_found') {\n                return res.status(404).json({\n                    message: 'User not found.'\n                });\n            }\n            return res.status(500).json({\n                message: error.message || 'Some error occurred while finding the User.'\n            });\n        }\n    }\n    // Find user by ID\n    static async findById(req, res) {\n        try {\n            const id = req.query.id;\n            console.log('Finding user by id:', id);\n            const user = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].findById(parseInt(id));\n            console.log('User found:', user);\n            res.json({\n                id: user.id,\n                username: user.username,\n                email: user.email\n            });\n        } catch (error) {\n            console.error('Error finding user by id:', error);\n            if (error.kind === 'not_found') {\n                return res.status(404).json({\n                    message: 'User not found.'\n                });\n            }\n            return res.status(500).json({\n                message: error.message || 'Some error occurred while finding the User.'\n            });\n        }\n    }\n    // Get user data by role\n    static async getUserDataByRole(req, res) {\n        try {\n            const role = req.query.role;\n            console.log('Finding users by role:', role);\n            const users = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUserDataByRole(role);\n            console.log('Users found:', users);\n            res.json(users);\n        } catch (error) {\n            console.error('Error finding users by role:', error);\n            if (error.kind === 'not_found') {\n                return res.status(404).json({\n                    message: 'No users found for this role.'\n                });\n            }\n            return res.status(500).json({\n                message: error.message || 'Some error occurred while finding the Users.'\n            });\n        }\n    }\n    // Search users by role and name\n    static async searchUsersByRoleAndName(req, res) {\n        try {\n            const { searchTerm, role, limit = 10 } = req.body;\n            console.log(req.body);\n            // Validate input\n            if (!searchTerm || typeof searchTerm !== 'string') {\n                return res.status(400).json({\n                    message: \"searchTerm diperlukan dan harus berupa string.\"\n                });\n            }\n            if (!role || typeof role !== 'string') {\n                return res.status(400).json({\n                    message: \"Role diperlukan dan harus berupa string.\"\n                });\n            }\n            // Validate limit\n            const parsedLimit = parseInt(limit.toString());\n            if (isNaN(parsedLimit) || parsedLimit < 1) {\n                return res.status(400).json({\n                    message: \"Limit harus berupa angka positif.\"\n                });\n            }\n            const users = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].searchUsersByRoleAndName(role, searchTerm, parsedLimit);\n            res.status(200).json({\n                users\n            });\n        } catch (error) {\n            console.error('Error searching users:', error);\n            res.status(500).json({\n                message: \"Terjadi kesalahan pada server.\"\n            });\n        }\n    }\n    // Search users by multiple roles and name\n    static async searchUsersByMultipleRolesAndName(req, res) {\n        try {\n            const { searchTerm, roles } = req.body;\n            if (!searchTerm || typeof searchTerm !== 'string') {\n                return res.status(400).json({\n                    message: \"searchTerm diperlukan dan harus berupa string.\"\n                });\n            }\n            if (!Array.isArray(roles) || roles.length === 0) {\n                return res.status(400).json({\n                    message: \"Roles harus berupa array dengan setidaknya satu item.\"\n                });\n            }\n            const parsedRoles = JSON.parse(JSON.stringify(roles));\n            const users = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].searchUsersByRolesAndName(parsedRoles, searchTerm);\n            res.status(200).json({\n                users\n            });\n        } catch (error) {\n            console.error('Error searching users:', error);\n            res.status(500).json({\n                message: \"Terjadi kesalahan pada server.\"\n            });\n        }\n    }\n    // Get paginated users\n    static async getPaginatedUsers(req, res) {\n        try {\n            const params = {\n                sortField: req.query.sortField || 'id',\n                sortOrder: req.query.sortOrder || 'asc',\n                search: req.query.search || '',\n                page: parseInt(req.query.page || '1'),\n                limit: parseInt(req.query.limit || '10'),\n                role: req.query.role || '',\n                education: req.query.education || '',\n                city: req.query.city || '',\n                province: req.query.province || '',\n                status: req.query.status || ''\n            };\n            const { users, total } = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getPaginatedUsers(params);\n            res.json({\n                data: users,\n                total,\n                page: parseInt(params.page?.toString() || '1'),\n                totalPages: Math.ceil(total / (params.limit || 10))\n            });\n        } catch (error) {\n            console.error('Get Paginated Users Error:', error);\n            res.status(500).json({\n                message: 'Server Error'\n            });\n        }\n    }\n    // Get total users and growth by role\n    static async getTotalUsersAndGrowthByRole(req, res) {\n        try {\n            const role = req.query.role;\n            if (!role) {\n                return res.status(400).json({\n                    message: 'Role parameter is required.'\n                });\n            }\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getTotalUsersAndGrowthByRole(role);\n            res.json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: error.message || 'Some error occurred while fetching total users and growth.'\n            });\n        }\n    }\n    // Get active users and growth by role\n    static async getActiveUsersAndGrowthByRole(req, res) {\n        try {\n            const role = req.query.role;\n            if (!role) {\n                return res.status(400).json({\n                    message: 'Role parameter is required'\n                });\n            }\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getActiveUsersAndGrowthByRole(role);\n            res.json(data);\n        } catch (error) {\n            console.error('Error fetching active users and growth:', error);\n            return res.status(500).json({\n                message: 'Error retrieving active users and growth'\n            });\n        }\n    }\n    // Get new users and growth\n    static async getNewUsersAndGrowth(req, res) {\n        try {\n            const role = req.query.role;\n            if (!role) {\n                return res.status(400).json({\n                    message: \"Role parameter is required.\"\n                });\n            }\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getNewUsersAndGrowthByRole(role);\n            res.json(data);\n        } catch (error) {\n            console.error(\"Error fetching new users and growth:\", error);\n            return res.status(500).json({\n                message: \"An error occurred while fetching new users and growth.\"\n            });\n        }\n    }\n    // Get revenue per user\n    static async getRevenuePerUser(req, res) {\n        try {\n            const role = req.query.role;\n            if (!role) {\n                return res.status(400).json({\n                    message: \"Role parameter is required.\"\n                });\n            }\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getRevenuePerUser(role);\n            res.json(data);\n        } catch (error) {\n            return res.status(500).json({\n                message: \"Error fetching revenue per user.\"\n            });\n        }\n    }\n    // Get student pendidikan distribution\n    static async getStudentPendidikanDistribution(req, res) {\n        try {\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getStudentPendidikanDistribution();\n            res.json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: error.message || \"Some error occurred while retrieving pendidikan distribution.\"\n            });\n        }\n    }\n    // Get student growth\n    static async getStudentGrowth(req, res) {\n        try {\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getStudentGrowth();\n            res.json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: \"Error retrieving student growth data.\"\n            });\n        }\n    }\n    // Get user details\n    static async getUserDetails(req, res) {\n        try {\n            const userId1 = req.query.userId;\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getUserDetailsById(parseInt(userId1));\n            res.status(200).json(data);\n        } catch (error) {\n            if (error.kind === 'not_found') {\n                return res.status(404).json({\n                    message: \"User not found.\"\n                });\n            }\n            res.status(500).json({\n                message: \"Error retrieving user details.\"\n            });\n        }\n    }\n    // Get student group\n    static async getStudentGroup(req, res) {\n        try {\n            const data = await _models_user_model__WEBPACK_IMPORTED_MODULE_0__[\"default\"].getStudentGroup();\n            res.json(data);\n        } catch (error) {\n            res.status(500).json({\n                message: error.message || \"Error fetching student groups.\"\n            });\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserController);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./controllers/user.controller.ts\n");

/***/ }),

/***/ "(api-node)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_1__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([pg__WEBPACK_IMPORTED_MODULE_0__]);\npg__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// lib/db.ts\n\n\n// Read CA certificate\nconst ca = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync('./ca.pem').toString();\nconst config = {\n    host: process.env.DB_HOST,\n    user: process.env.DB_USER,\n    password: process.env.DB_PASSWORD,\n    database: process.env.DB_DATABASE,\n    port: parseInt(process.env.DB_PORT),\n    ssl: {\n        ca: ca,\n        rejectUnauthorized: false\n    }\n};\nconst pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool(config);\n// Test the database connection\npool.connect((err, client, release)=>{\n    if (err) {\n        console.error('Error acquiring client', err.stack);\n    } else {\n        console.log('Connected to the database');\n    }\n    release();\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (pool);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL2xpYi9kYi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUEsWUFBWTtBQUMwQjtBQUNiO0FBZXpCLHNCQUFzQjtBQUN0QixNQUFNRSxLQUFLRCw0Q0FBZSxDQUFDLFlBQVlHLFFBQVE7QUFFL0MsTUFBTUMsU0FBeUI7SUFDN0JDLE1BQU1DLFFBQVFDLEdBQUcsQ0FBQ0MsT0FBTztJQUN6QkMsTUFBTUgsUUFBUUMsR0FBRyxDQUFDRyxPQUFPO0lBQ3pCQyxVQUFVTCxRQUFRQyxHQUFHLENBQUNLLFdBQVc7SUFDakNDLFVBQVVQLFFBQVFDLEdBQUcsQ0FBQ08sV0FBVztJQUNqQ0MsTUFBTUMsU0FBU1YsUUFBUUMsR0FBRyxDQUFDVSxPQUFPO0lBQ2xDQyxLQUFLO1FBQ0hqQixJQUFJQTtRQUNKa0Isb0JBQW9CO0lBQ3RCO0FBQ0Y7QUFFQSxNQUFNQyxPQUFPLElBQUlyQixvQ0FBSUEsQ0FBQ0s7QUFFdEIsK0JBQStCO0FBQy9CZ0IsS0FBS0MsT0FBTyxDQUFDLENBQUNDLEtBQXdCQyxRQUFnQ0M7SUFDcEUsSUFBSUYsS0FBSztRQUNQRyxRQUFRQyxLQUFLLENBQUMsMEJBQTBCSixJQUFJSyxLQUFLO0lBQ25ELE9BQU87UUFDTEYsUUFBUUcsR0FBRyxDQUFDO0lBQ2Q7SUFDQUo7QUFDRjtBQUVBLGlFQUFlSixJQUFJQSxFQUFDIiwic291cmNlcyI6WyJEOlxcTGF0aWhhblxcTmV3IGZvbGRlciAoMilcXEZFXFwxXFxGRVxcTmV4dFxcZnV0dXJlZHVcXGxpYlxcZGIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbGliL2RiLnRzXHJcbmltcG9ydCB7IFBvb2wsIFBvb2xDbGllbnQgfSBmcm9tICdwZyc7XHJcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcclxuXHJcbi8vIFR5cGVzXHJcbmV4cG9ydCBpbnRlcmZhY2UgRGF0YWJhc2VDb25maWcge1xyXG4gIGhvc3Q6IHN0cmluZztcclxuICB1c2VyOiBzdHJpbmc7XHJcbiAgcGFzc3dvcmQ6IHN0cmluZztcclxuICBkYXRhYmFzZTogc3RyaW5nO1xyXG4gIHBvcnQ6IG51bWJlcjtcclxuICBzc2w6IHtcclxuICAgIGNhOiBzdHJpbmc7XHJcbiAgICByZWplY3RVbmF1dGhvcml6ZWQ6IGJvb2xlYW47XHJcbiAgfTtcclxufVxyXG5cclxuLy8gUmVhZCBDQSBjZXJ0aWZpY2F0ZVxyXG5jb25zdCBjYSA9IGZzLnJlYWRGaWxlU3luYygnLi9jYS5wZW0nKS50b1N0cmluZygpO1xyXG5cclxuY29uc3QgY29uZmlnOiBEYXRhYmFzZUNvbmZpZyA9IHtcclxuICBob3N0OiBwcm9jZXNzLmVudi5EQl9IT1NUISxcclxuICB1c2VyOiBwcm9jZXNzLmVudi5EQl9VU0VSISxcclxuICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQhLFxyXG4gIGRhdGFiYXNlOiBwcm9jZXNzLmVudi5EQl9EQVRBQkFTRSEsXHJcbiAgcG9ydDogcGFyc2VJbnQocHJvY2Vzcy5lbnYuREJfUE9SVCEpLFxyXG4gIHNzbDoge1xyXG4gICAgY2E6IGNhLFxyXG4gICAgcmVqZWN0VW5hdXRob3JpemVkOiBmYWxzZVxyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbChjb25maWcpO1xyXG5cclxuLy8gVGVzdCB0aGUgZGF0YWJhc2UgY29ubmVjdGlvblxyXG5wb29sLmNvbm5lY3QoKGVycjogRXJyb3IgfCB1bmRlZmluZWQsIGNsaWVudDogUG9vbENsaWVudCB8IHVuZGVmaW5lZCwgcmVsZWFzZTogKCkgPT4gdm9pZCkgPT4ge1xyXG4gIGlmIChlcnIpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGFjcXVpcmluZyBjbGllbnQnLCBlcnIuc3RhY2spO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zb2xlLmxvZygnQ29ubmVjdGVkIHRvIHRoZSBkYXRhYmFzZScpO1xyXG4gIH1cclxuICByZWxlYXNlKCk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgcG9vbDsiXSwibmFtZXMiOlsiUG9vbCIsImZzIiwiY2EiLCJyZWFkRmlsZVN5bmMiLCJ0b1N0cmluZyIsImNvbmZpZyIsImhvc3QiLCJwcm9jZXNzIiwiZW52IiwiREJfSE9TVCIsInVzZXIiLCJEQl9VU0VSIiwicGFzc3dvcmQiLCJEQl9QQVNTV09SRCIsImRhdGFiYXNlIiwiREJfREFUQUJBU0UiLCJwb3J0IiwicGFyc2VJbnQiLCJEQl9QT1JUIiwic3NsIiwicmVqZWN0VW5hdXRob3JpemVkIiwicG9vbCIsImNvbm5lY3QiLCJlcnIiLCJjbGllbnQiLCJyZWxlYXNlIiwiY29uc29sZSIsImVycm9yIiwic3RhY2siLCJsb2ciXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./lib/db.ts\n");

/***/ }),

/***/ "(api-node)/./models/user.model.ts":
/*!******************************!*\
  !*** ./models/user.model.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _lib_db__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/db */ \"(api-node)/./lib/db.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_db__WEBPACK_IMPORTED_MODULE_0__]);\n_lib_db__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// models/user.model.ts\n\n// User Model Class\nclass UserModel {\n    // Create new user\n    static async create(newUser) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"INSERT INTO users (username, email, password, role) VALUES ($1, $2, $3, $4) RETURNING *\", [\n                newUser.username,\n                newUser.email,\n                newUser.password,\n                newUser.role\n            ]);\n            if (newUser.fullName) {\n                await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"INSERT INTO user_account (user_id, nama_lengkap, is_manual) VALUES ($1, $2, false)\", [\n                    result.rows[0].user_id,\n                    newUser.fullName\n                ]);\n            }\n            console.log(\"created user: \", result.rows[0].user_id);\n            return result.rows[0];\n        } catch (error) {\n            console.log(\"error: \", error);\n            throw error;\n        }\n    }\n    // Get cart count\n    static async getCartCount(userId) {\n        const { rows } = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`SELECT COALESCE(SUM(ci.quantity),0) AS cartcount\n         FROM cart_items ci\n         JOIN cart        c  ON ci.cart_id = c.id\n        WHERE c.user_id = $1`, [\n            userId\n        ]);\n        return parseInt(rows[0].cartcount, 10);\n    }\n    // Get unpaid count\n    static async getUnpaidCount(userId) {\n        const { rows } = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`SELECT COUNT(*) AS unpaidcount\n         FROM sales_order_header\n        WHERE user_id = $1\n          AND payment_status = 'pending'`, [\n            userId\n        ]);\n        return parseInt(rows[0].unpaidcount, 10);\n    }\n    // Delete user by ID\n    static async deleteUser(userId) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`DELETE FROM users WHERE id = $1 RETURNING id`, [\n                userId\n            ]);\n            if (result.rows.length === 0) {\n                throw {\n                    kind: \"not_found\"\n                };\n            }\n            console.log(\"Deleted user with id:\", result.rows[0].id);\n            return result.rows[0];\n        } catch (error) {\n            console.error(\"Error deleting user:\", error);\n            throw error;\n        }\n    }\n    // Update user data\n    static async updateUser(userId, updatedData) {\n        const { username, email, oldPassword, newPassword } = updatedData;\n        try {\n            // Check old password\n            const checkResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`SELECT password FROM users WHERE id = $1`, [\n                userId\n            ]);\n            if (checkResult.rows.length === 0) {\n                throw {\n                    message: \"User not found\"\n                };\n            }\n            const currentPassword = checkResult.rows[0].password;\n            if (currentPassword !== oldPassword) {\n                throw {\n                    message: \"Old password does not match\"\n                };\n            }\n            // Update user data\n            const updateResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(`UPDATE users\n         SET username = $1, email = $2, password = $3\n         WHERE id = $4\n         RETURNING id, username, email, role, last_login, create_date`, [\n                username,\n                email,\n                newPassword,\n                userId\n            ]);\n            if (updateResult.rows.length === 0) {\n                throw {\n                    message: \"Update failed\"\n                };\n            }\n            return updateResult.rows[0];\n        } catch (error) {\n            console.error(\"Error updating user data:\", error);\n            throw error;\n        }\n    }\n    // Check if username or email exists\n    static async checkExistence(username, email) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"SELECT * FROM users WHERE username = $1 OR email = $2\", [\n                username,\n                email\n            ]);\n            return result.rows;\n        } catch (error) {\n            console.log(\"error: \", error);\n            throw error;\n        }\n    }\n    // Find user by username\n    static async findByUsername(username) {\n        try {\n            console.log('Executing query to find user by username:', username);\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"SELECT * FROM users WHERE username = $1\", [\n                username\n            ]);\n            console.log('Query result:', result.rows);\n            if (result.rows.length === 0) {\n                console.log('User not found for username:', username);\n                throw {\n                    kind: \"not_found\"\n                };\n            }\n            console.log('User found:', result.rows[0]);\n            return result.rows[0];\n        } catch (error) {\n            console.log(\"error executing query: \", error);\n            throw error;\n        }\n    }\n    // Find user by ID\n    static async findById(id) {\n        try {\n            console.log('Executing query to find user by id:', id);\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"SELECT id, username, email FROM users WHERE id = $1\", [\n                id\n            ]);\n            console.log('Query result:', result.rows);\n            if (result.rows.length === 0) {\n                console.log('User not found for id:', id);\n                throw {\n                    kind: \"not_found\"\n                };\n            }\n            console.log('User found:', result.rows[0]);\n            return result.rows[0];\n        } catch (error) {\n            console.log(\"error executing query: \", error);\n            throw error;\n        }\n    }\n    // Update last login\n    static async updateLastLogin(username) {\n        try {\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"UPDATE users SET last_login = NOW() WHERE username = $1 RETURNING *\", [\n                username\n            ]);\n            console.log(\"Updated last_login for user:\", result.rows[0]);\n            return result.rows[0];\n        } catch (error) {\n            console.log(\"Error updating last_login:\", error);\n            throw error;\n        }\n    }\n    // Get user data by role\n    static async getUserDataByRole(role) {\n        try {\n            console.log('Executing query to find users by role:', role);\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(\"SELECT * FROM v_dashboard_UserData WHERE role = $1\", [\n                role\n            ]);\n            console.log('Query result:', result.rows);\n            if (result.rows.length === 0) {\n                console.log('No users found for role:', role);\n                throw {\n                    kind: \"not_found\"\n                };\n            }\n            return result.rows;\n        } catch (error) {\n            console.error(\"Error executing query:\", error);\n            throw error;\n        }\n    }\n    // Get paginated users\n    static async getPaginatedUsers(options = {}) {\n        const { sortField = 'id', sortOrder = 'asc', search = '', page = 1, limit = 10, role = '', education = '', city = '', province = '', status = '' } = options;\n        const offset = (page - 1) * limit;\n        let query = `\n    WITH filtered_users AS (\n      SELECT \n        userid id,*\n      FROM v_dashboard_UserData u\n      WHERE 1=1\n    `;\n        const values = [];\n        const conditions = [];\n        // Filter by role\n        if (role && role !== 'All') {\n            values.push(role);\n            conditions.push(`AND u.role = $${values.length}`);\n        }\n        // Filter by education\n        if (education && education !== 'All') {\n            values.push(education);\n            conditions.push(`AND u.pendidikan = $${values.length}`);\n        }\n        // Filter by city\n        if (city && city !== 'All') {\n            values.push(city);\n            conditions.push(`AND u.kota = $${values.length}`);\n        }\n        // Filter by province\n        if (province && province !== 'All') {\n            values.push(province);\n            conditions.push(`AND u.provinsi = $${values.length}`);\n        }\n        // Filter by status\n        if (status && status !== 'All') {\n            values.push(status);\n            conditions.push(`AND u.status = $${values.length}`);\n        }\n        // Search in user_code, nama_lengkap, and email\n        if (search) {\n            values.push(`%${search}%`);\n            values.push(`%${search}%`);\n            values.push(`%${search}%`);\n            conditions.push(`AND (\n        u.user_code ILIKE $${values.length - 2} OR \n        u.nama_lengkap ILIKE $${values.length - 1} OR \n        u.email ILIKE $${values.length}\n      )`);\n        }\n        if (conditions.length > 0) {\n            query += conditions.join(' ');\n        }\n        query += `) \n      SELECT \n        *, \n        COUNT(*) OVER() AS total \n      FROM filtered_users\n    `;\n        // Sorting\n        const validSortFields = [\n            'userid',\n            'user_code',\n            'nama_lengkap',\n            'email',\n            'pendidikan',\n            'kota',\n            'provinsi',\n            'status'\n        ];\n        if (validSortFields.includes(sortField.toLowerCase()) && [\n            'asc',\n            'desc'\n        ].includes(sortOrder.toLowerCase())) {\n            query += ` ORDER BY ${sortField} ${sortOrder.toUpperCase()}`;\n        } else {\n            query += ` ORDER BY userid ASC`;\n        }\n        query += ` LIMIT $${values.length + 1} OFFSET $${values.length + 2}`;\n        const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, [\n            ...values,\n            limit,\n            offset\n        ]);\n        return {\n            users: result.rows,\n            total: result.rows.length > 0 ? result.rows[0].total : 0\n        };\n    }\n    // Get total users and growth by role\n    static async getTotalUsersAndGrowthByRole(role) {\n        try {\n            const currentCountQuery = `\n          SELECT COUNT(*) AS total \n          FROM users\n          WHERE role = $1;\n      `;\n            const lastMonthCountQuery = `\n          SELECT COUNT(*) AS total \n          FROM users\n          WHERE role = $1 AND create_date >= NOW() - INTERVAL '1 MONTH';\n      `;\n            const currentCountResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(currentCountQuery, [\n                role\n            ]);\n            const lastMonthCountResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(lastMonthCountQuery, [\n                role\n            ]);\n            const totalUsers = currentCountResult.rows[0].total;\n            const lastMonthUsers = lastMonthCountResult.rows[0].total;\n            // Calculate growth\n            const growthPercentage = lastMonthUsers === 0 ? 0 : (totalUsers - lastMonthUsers) / lastMonthUsers * 100;\n            return {\n                totalUsers,\n                growthPercentage: parseFloat(growthPercentage.toFixed(2))\n            };\n        } catch (error) {\n            console.error('Error fetching total users and growth:', error);\n            throw error;\n        }\n    }\n    // Get active users and growth by role\n    static async getActiveUsersAndGrowthByRole(role) {\n        try {\n            const activeUsersQuery = `\n          SELECT COUNT(*) AS activeUsers\n          FROM users\n          WHERE role = $1 AND last_login >= NOW() - INTERVAL '14 DAYS';\n      `;\n            const lastMonthActiveUsersQuery = `\n          SELECT COUNT(*) AS lastMonthActiveUsers\n          FROM users\n          WHERE role = $1 AND last_login >= NOW() - INTERVAL '30 DAYS';\n      `;\n            const activeUsersResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(activeUsersQuery, [\n                role\n            ]);\n            const lastMonthActiveUsersResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(lastMonthActiveUsersQuery, [\n                role\n            ]);\n            const activeUsers = parseInt(activeUsersResult.rows[0].activeusers, 10);\n            const lastMonthActiveUsers = parseInt(lastMonthActiveUsersResult.rows[0].lastmonthactiveusers, 10);\n            // Calculate growth\n            const growthPercentage = lastMonthActiveUsers === 0 ? 0 : (activeUsers - lastMonthActiveUsers) / lastMonthActiveUsers * 100;\n            return {\n                activeUsers,\n                growthPercentage: parseFloat(growthPercentage.toFixed(2))\n            };\n        } catch (error) {\n            console.error(\"Error fetching active users and growth: \", error);\n            throw error;\n        }\n    }\n    // Get new users and growth by role\n    static async getNewUsersAndGrowthByRole(role) {\n        try {\n            // Query untuk pengguna baru bulan ini\n            const currentMonthQuery = `\n          SELECT COUNT(*) AS newUsers\n          FROM users\n          WHERE role = $1 AND create_date >= DATE_TRUNC('month', NOW());\n      `;\n            // Query untuk pengguna baru bulan lalu\n            const previousMonthQuery = `\n          SELECT COUNT(*) AS previousMonthUsers\n          FROM users\n          WHERE role = $1 AND create_date >= DATE_TRUNC('month', NOW()) - INTERVAL '1 MONTH'\n            AND create_date < DATE_TRUNC('month', NOW());\n      `;\n            const currentMonthResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(currentMonthQuery, [\n                role\n            ]);\n            const previousMonthResult = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(previousMonthQuery, [\n                role\n            ]);\n            const newUsers = parseInt(currentMonthResult.rows[0].newusers, 10);\n            const previousMonthUsers = parseInt(previousMonthResult.rows[0].previousmonthusers, 10);\n            // Hitung pertumbuhan\n            const growthPercentage = previousMonthUsers === 0 ? 0 : (newUsers - previousMonthUsers) / previousMonthUsers * 100;\n            return {\n                newUsers,\n                growthPercentage: parseFloat(growthPercentage.toFixed(2))\n            };\n        } catch (error) {\n            console.error(\"Error fetching new users and growth: \", error);\n            throw error;\n        }\n    }\n    // Get revenue per user\n    static async getRevenuePerUser(role) {\n        try {\n            const query = `\n          WITH current_quarter_revenue AS (\n              SELECT \n                  COALESCE(AVG(o.total_price)::NUMERIC, 0) AS avg_revenue_current_quarter\n              FROM \n                  payments p\n              JOIN \n                  users u ON p.user_id = u.id\n              JOIN \n                  orders o ON o.order_id = p.order_id\n              WHERE \n                  p.status = 'Settlement'\n                  AND u.role = $1\n                  AND EXTRACT(QUARTER FROM p.payment_date) = EXTRACT(QUARTER FROM CURRENT_DATE)\n                  AND EXTRACT(YEAR FROM p.payment_date) = EXTRACT(YEAR FROM CURRENT_DATE)\n          ),\n          previous_quarter_revenue AS (\n              SELECT \n                  COALESCE(AVG(o.total_price)::NUMERIC, 0) AS avg_revenue_previous_quarter\n              FROM \n                  payments p\n              JOIN \n                  users u ON p.user_id = u.id\n              JOIN \n                  orders o ON o.order_id = p.order_id\n              WHERE \n                  p.status = 'Settlement'\n                  AND u.role = $1\n                  AND (\n                      (EXTRACT(QUARTER FROM p.payment_date) = EXTRACT(QUARTER FROM CURRENT_DATE) - 1\n                      AND EXTRACT(YEAR FROM p.payment_date) = EXTRACT(YEAR FROM CURRENT_DATE))\n                      OR (EXTRACT(QUARTER FROM CURRENT_DATE) = 1 AND EXTRACT(QUARTER FROM p.payment_date) = 4 \n                      AND EXTRACT(YEAR FROM p.payment_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1)\n                  )\n          )\n          SELECT \n              current_quarter_revenue.avg_revenue_current_quarter,\n              previous_quarter_revenue.avg_revenue_previous_quarter,\n              CASE \n                  WHEN previous_quarter_revenue.avg_revenue_previous_quarter = 0 THEN 0\n                  ELSE ((current_quarter_revenue.avg_revenue_current_quarter - previous_quarter_revenue.avg_revenue_previous_quarter) \n                        / previous_quarter_revenue.avg_revenue_previous_quarter) * 100\n              END AS growth_percentage\n          FROM \n              current_quarter_revenue, \n              previous_quarter_revenue;\n      `;\n            const values = [\n                role\n            ];\n            const { rows } = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n            if (rows[0]) {\n                rows[0].avg_revenue_current_quarter = parseFloat(rows[0].avg_revenue_current_quarter);\n                rows[0].avg_revenue_previous_quarter = parseFloat(rows[0].avg_revenue_previous_quarter);\n                rows[0].growth_percentage = parseFloat(rows[0].growth_percentage);\n            }\n            return rows[0];\n        } catch (error) {\n            console.error('Error fetching revenue per user:', error);\n            throw error;\n        }\n    }\n    // Get student pendidikan distribution\n    static async getStudentPendidikanDistribution() {\n        try {\n            const query = `\n          SELECT \n              CASE\n                  WHEN ua.pendidikan_sekarang = 'Kuliah' THEN \n                      COALESCE(ua.strata, 'Other')\n                  WHEN ua.pendidikan_sekarang IS NULL OR ua.pendidikan_sekarang = '' THEN 'Other'\n                  ELSE ua.pendidikan_sekarang\n              END AS pendidikan_group,\n              COUNT(*) AS total\n          FROM \n              users u\n          LEFT JOIN \n              user_account ua ON u.id = ua.id\n          WHERE\n              u.role = 'student'\n          GROUP BY \n              CASE\n                  WHEN ua.pendidikan_sekarang = 'Kuliah' THEN \n                      COALESCE(ua.strata, 'Other')\n                  WHEN ua.pendidikan_sekarang IS NULL OR ua.pendidikan_sekarang = '' THEN 'Other'\n                  ELSE ua.pendidikan_sekarang\n              END;\n      `;\n            const { rows } = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query);\n            return rows;\n        } catch (error) {\n            console.error('Error fetching pendidikan distribution:', error);\n            throw error;\n        }\n    }\n    // Get student growth\n    static async getStudentGrowth() {\n        try {\n            const query = `\n          WITH student_data AS (\n              SELECT\n                  COALESCE(\n                      CASE\n                          WHEN ua.pendidikan_sekarang = 'Kuliah' THEN CONCAT('Kuliah - ', ua.strata)\n                          WHEN ua.pendidikan_sekarang IS NULL OR ua.pendidikan_sekarang = '' THEN 'Other'\n                          ELSE ua.pendidikan_sekarang\n                      END,\n                      'Other'\n                  ) AS pendidikan_group,\n                  to_char(\n                      (u.create_date AT TIME ZONE 'UTC' AT TIME ZONE 'Asia/Jakarta'),\n                      'IYYY-IW'\n                  ) AS year_week\n              FROM users u\n              LEFT JOIN user_account ua ON u.id = ua.id\n          )\n          SELECT\n              pendidikan_group,\n              year_week,\n              COUNT(*) AS total\n          FROM student_data\n          GROUP BY pendidikan_group, year_week\n          ORDER BY year_week ASC, pendidikan_group ASC;\n      `;\n            const { rows } = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query);\n            return rows;\n        } catch (error) {\n            console.error(\"Error fetching student growth data:\", error);\n            throw error;\n        }\n    }\n    // Get user details by ID\n    static async getUserDetailsById(userId) {\n        try {\n            const query = `\n          SELECT\n              u.username,\n              u.email,\n              u.create_date,\n              u.last_login,\n              ua.tanggal_lahir,\n              ua.nomor_whatsapp,\n              ua.tahun_lulus_sma_smk,\n              ua.tahun_masuk,\n              ua.tahun_lulus,\n              ua.nomor_whatsapp_ortu,\n              ua.provinsi,\n              ua.kota,\n              ua.kecamatan,\n              ua.kelurahan,\n              ua.pendidikan_sekarang,\n              ua.sekolah,\n              ua.kelas,\n              ua.jurusan,\n              ua.pendidikan_terakhir,\n              ua.strata,\n              ua.nama_lengkap,\n              ua.nama_panggilan,\n              ua.jenis_kelamin,\n              ua.universitas,\n              ua.program_studi\n          FROM users u\n          JOIN user_account ua ON u.id = ua.id\n          WHERE u.id = $1\n      `;\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, [\n                userId\n            ]);\n            if (result.rows.length === 0) {\n                throw {\n                    kind: \"not_found\"\n                };\n            }\n            const filteredData = {};\n            for(const key in result.rows[0]){\n                if (result.rows[0][key] !== null) {\n                    filteredData[key] = result.rows[0][key];\n                }\n            }\n            return filteredData;\n        } catch (error) {\n            console.error(\"Error fetching user details:\", error);\n            throw error;\n        }\n    }\n    // Search users by role and name\n    static async searchUsersByRoleAndName(role, searchTerm, limit = 10) {\n        const query = `\n        SELECT userid, name, username\n        FROM v_dashboard_userdata\n        WHERE role = $1 \n        AND (\n            name ILIKE $2 \n            OR username ILIKE $2\n        )\n        ORDER BY name ASC\n        LIMIT $3\n    `;\n        const values = [\n            role,\n            `%${searchTerm}%`,\n            limit\n        ];\n        try {\n            const res = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n            return res.rows;\n        } catch (error) {\n            throw error;\n        }\n    }\n    // Search users by roles and name\n    static async searchUsersByRolesAndName(roles, searchTerm) {\n        const query = `\n        SELECT userid, name\n        FROM v_dashboard_userdata\n        WHERE role IN (${roles.map((_, i)=>`$${i + 1}`).join(', ')})\n        AND name ILIKE $${roles.length + 1}\n        ORDER BY name ASC\n        LIMIT 50\n    `;\n        const values = [\n            ...roles,\n            `%${searchTerm}%`\n        ];\n        try {\n            const res = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query, values);\n            return res.rows;\n        } catch (error) {\n            console.error('Query error:', error.message);\n            throw error;\n        }\n    }\n    // Get student group\n    static async getStudentGroup() {\n        try {\n            const query = `\n        SELECT \n          dgu.id,\n          dgu.name,\n          dgu.id_list,\n          array_agg(vdu.name) AS user_names\n        FROM \n          dimgroupstudent dgu\n        CROSS JOIN LATERAL UNNEST(dgu.id_list) AS user_id\n        JOIN \n          v_dashboard_userdata vdu ON vdu.userid = user_id\n        WHERE dgu.status = 1\n        GROUP BY \n          dgu.id, dgu.name;\n      `;\n            const result = await _lib_db__WEBPACK_IMPORTED_MODULE_0__[\"default\"].query(query);\n            return result.rows;\n        } catch (error) {\n            throw new Error(`Error fetching student groups: ${error.message}`);\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (UserModel);\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./models/user.model.ts\n");

/***/ }),

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusers%5Clogin.ts&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusers%5Clogin.ts&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\users\\login.ts */ \"(api-node)/./pages/api/users/login.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/users/login\",\n        pathname: \"/api/users/login\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_users_login_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGdXNlcnMlMkZsb2dpbiZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDdXNlcnMlNUNsb2dpbi50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUMwRDtBQUMxRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHVzZXJzXFxcXGxvZ2luLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsICdkZWZhdWx0Jyk7XG4vLyBSZS1leHBvcnQgY29uZmlnLlxuZXhwb3J0IGNvbnN0IGNvbmZpZyA9IGhvaXN0KHVzZXJsYW5kLCAnY29uZmlnJyk7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS91c2Vycy9sb2dpblwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3VzZXJzL2xvZ2luXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusers%5Clogin.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/users/login.ts":
/*!**********************************!*\
  !*** ./pages/api/users/login.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _controllers_user_controller__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../controllers/user.controller */ \"(api-node)/./controllers/user.controller.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_controllers_user_controller__WEBPACK_IMPORTED_MODULE_0__]);\n_controllers_user_controller__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n// pages/api/users/login.ts\n\nasync function handler(req, res) {\n    if (req.method !== 'POST') {\n        return res.status(405).json({\n            message: 'Method not allowed'\n        });\n    }\n    try {\n        return await _controllers_user_controller__WEBPACK_IMPORTED_MODULE_0__[\"default\"].login(req, res);\n    } catch (error) {\n        return res.status(500).json({\n            message: 'Internal server error'\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3BhZ2VzL2FwaS91c2Vycy9sb2dpbi50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLDJCQUEyQjtBQUV1QztBQUVuRCxlQUFlQyxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUTtRQUN6QixPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsSUFBSSxDQUFDO1lBQUVDLFNBQVM7UUFBcUI7SUFDOUQ7SUFFQSxJQUFJO1FBQ0YsT0FBTyxNQUFNUCwwRUFBb0IsQ0FBQ0UsS0FBS0M7SUFDekMsRUFBRSxPQUFPTSxPQUFPO1FBQ2QsT0FBT04sSUFBSUUsTUFBTSxDQUFDLEtBQUtDLElBQUksQ0FBQztZQUFFQyxTQUFTO1FBQXdCO0lBQ2pFO0FBQ0YiLCJzb3VyY2VzIjpbIkQ6XFxMYXRpaGFuXFxOZXcgZm9sZGVyICgyKVxcRkVcXDFcXEZFXFxOZXh0XFxmdXR1cmVkdVxccGFnZXNcXGFwaVxcdXNlcnNcXGxvZ2luLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhZ2VzL2FwaS91c2Vycy9sb2dpbi50c1xyXG5pbXBvcnQgeyBOZXh0QXBpUmVxdWVzdCwgTmV4dEFwaVJlc3BvbnNlIH0gZnJvbSAnbmV4dCc7XHJcbmltcG9ydCBVc2VyQ29udHJvbGxlciBmcm9tICcuLi8uLi8uLi9jb250cm9sbGVycy91c2VyLmNvbnRyb2xsZXInO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihyZXE6IE5leHRBcGlSZXF1ZXN0LCByZXM6IE5leHRBcGlSZXNwb25zZSkge1xyXG4gIGlmIChyZXEubWV0aG9kICE9PSAnUE9TVCcpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDQwNSkuanNvbih7IG1lc3NhZ2U6ICdNZXRob2Qgbm90IGFsbG93ZWQnIH0pO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBhd2FpdCBVc2VyQ29udHJvbGxlci5sb2dpbihyZXEsIHJlcyk7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7IG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InIH0pO1xyXG4gIH1cclxufSJdLCJuYW1lcyI6WyJVc2VyQ29udHJvbGxlciIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJqc29uIiwibWVzc2FnZSIsImxvZ2luIiwiZXJyb3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/users/login.ts\n");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "jsonwebtoken":
/*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("jsonwebtoken");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = import("pg");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusers%2Flogin&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusers%5Clogin.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();